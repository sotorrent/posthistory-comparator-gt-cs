Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
76169868;26538681;2778484;2;d979a280-6753-49f1-888b-a3ccf90f7aa9;2014-10-23 22:39:51.0;"I'd apply `sprintf` with a comma-separated list input to generate a single, fully-delimited string (with delimiter at end of line/string), and then use `textscan` to pull out the integers:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    s = sprintf('%s_',list_of_words{:});                     &#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    C = textscan(s,'%u','Delimiter','_','CollectOutput',1);&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    M = reshape(C{1},[],numel(list_of_words)).'; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;Benchmarks coming.";;
76170773;26538681;2778484;5;6ab089a6-0e97-44fe-b4a7-420f12d7930a;2014-10-23 23:01:42.0;"I'd apply [`sprintf`][1] with a [comma-separated list][2] input to generate a single, fully-delimited string (with delimiter at end of each line/string), and then use [`textscan`][3] to pull out the integers:&#xD;&#xA;&#xD;&#xA;**extractIntsSprintfTextScan.m**&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    s = sprintf('%s_',list_of_words{:});                     &#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    C = textscan(s,'%u','Delimiter','_','CollectOutput',1); % can also use %d for signed&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    M = reshape(C{1},[],numel(list_of_words)).'; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;**Benchmarks**&#xD;&#xA;&#xD;&#xA;With the solution_referee_timeit.m found [here][4].&#xD;&#xA;&#xD;&#xA;    >> solution_referee_timeit&#xD;&#xA;    time_eval =&#xD;&#xA;             0.809977664535923&#xD;&#xA;    time_sscanf2 =&#xD;&#xA;             0.178462681002508&#xD;&#xA;    time_Divakar =&#xD;&#xA;              0.13362352613962&#xD;&#xA;    time_Luis =&#xD;&#xA;              0.16793215093439&#xD;&#xA;    time_Jon =&#xD;&#xA;             0.125415448562855&#xD;&#xA;&#xD;&#xA;**Machine**&#xD;&#xA;&#xD;&#xA;>MATLAB R2014b 64-bit <br>&#xD;&#xA;>Windows 7 64-bit <br>&#xD;&#xA;>24 GB RAM <br>&#xD;&#xA;>Dual Xeon X5550 (2.67GHZ, 8 physical cores) <br>&#xD;&#xA;&#xD;&#xA;  [1]: http://www.mathworks.com/help/matlab/ref/sprintf.html&#xD;&#xA;  [2]: http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&#xD;&#xA;  [3]: http://www.mathworks.com/help/matlab/ref/textscan.html&#xD;&#xA;  [4]: https://gist.github.com/chappjc/a038a74945d84015e61b";;added 547 characters in body
76171155;26538681;2778484;5;dd51c752-3b00-4c70-9087-b5367c1a9b65;2014-10-23 23:10:50.0;"I'd apply [`sprintf`][1] with a [comma-separated list][2] input to generate a single, fully-delimited string (with delimiter at end of each line/string), and then use [`textscan`][3] to pull out the integers:&#xD;&#xA;&#xD;&#xA;**extractIntsSprintfTextScan.m**&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    s = sprintf('%s_',list_of_words{:});                     &#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    % C = textscan(s,'%u','Delimiter','_','CollectOutput',1); % can also use %d for signed&#xD;&#xA;    C = textscan(s,'%u_','CollectOutput',1); % a little faster to put _ in the pattern&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    M = reshape(C{1},[],numel(list_of_words)).'; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;**Benchmarks**&#xD;&#xA;&#xD;&#xA;With the solution_referee_timeit.m found [here][4].&#xD;&#xA;&#xD;&#xA;    >> solution_referee_timeit&#xD;&#xA;    time_eval =&#xD;&#xA;             0.809977664535923&#xD;&#xA;    time_sscanf2 =&#xD;&#xA;             0.178462681002508&#xD;&#xA;    time_Divakar =&#xD;&#xA;              0.13362352613962&#xD;&#xA;    time_Luis =&#xD;&#xA;              0.16793215093439&#xD;&#xA;    time_Jon =&#xD;&#xA;             0.125415448562855&#xD;&#xA;&#xD;&#xA;**Machine**&#xD;&#xA;&#xD;&#xA;>MATLAB R2014b 64-bit <br>&#xD;&#xA;>Windows 7 64-bit <br>&#xD;&#xA;>24 GB RAM <br>&#xD;&#xA;>Dual Xeon X5550 (2.67GHZ, 8 physical cores) <br>&#xD;&#xA;&#xD;&#xA;  [1]: http://www.mathworks.com/help/matlab/ref/sprintf.html&#xD;&#xA;  [2]: http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&#xD;&#xA;  [3]: http://www.mathworks.com/help/matlab/ref/textscan.html&#xD;&#xA;  [4]: https://gist.github.com/chappjc/a038a74945d84015e61b";;added 90 characters in body
76171926;26538681;2778484;5;2d772d04-225d-489e-81d1-0cdc969860ca;2014-10-23 23:33:08.0;"I'd apply [`sprintf`][1] with a [comma-separated list][2] input to generate a single, fully-delimited string (with delimiter at end of each line/string), and then use [`textscan`][3] to pull out the integers:&#xD;&#xA;&#xD;&#xA;**extractIntsSprintfTextScan.m**&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    s = sprintf('%s_',list_of_words{:});                     &#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    % C = textscan(s,'%u','Delimiter','_','CollectOutput',1); % can also use %d for signed&#xD;&#xA;    C = textscan(s,'%.0f_','CollectOutput',1); % a little faster to put _ in the pattern&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    M = reshape(C{1},[],numel(list_of_words)).'; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;**Benchmarks**&#xD;&#xA;&#xD;&#xA;With the solution_referee_timeit.m found [here][4].&#xD;&#xA;&#xD;&#xA;    >> solution_referee_timeit&#xD;&#xA;    time_eval =&#xD;&#xA;              1.36562011059848&#xD;&#xA;    time_sscanf2 =&#xD;&#xA;             0.296977068813193&#xD;&#xA;    time_Divakar =&#xD;&#xA;             0.223082043049869&#xD;&#xA;    time_Luis =&#xD;&#xA;             0.294571850320574&#xD;&#xA;    time_Jon =  % Jon a.k.a. chappjc&#xD;&#xA;             0.207916231952681&#xD;&#xA;&#xD;&#xA;**Machine**&#xD;&#xA;&#xD;&#xA;>MATLAB R2014b 64-bit <br>&#xD;&#xA;>Windows 7 64-bit <br>&#xD;&#xA;>24 GB RAM <br>&#xD;&#xA;>Dual Xeon X5550 (2.67GHZ, 8 physical cores) <br>&#xD;&#xA;&#xD;&#xA;**UPDATE**: Change output type to double from an integer type. Re-run benchmarks.&#xD;&#xA;**UPDATE 2**: Change format specifier from '%f' to '%.0f', maybe allowing it to speed up the scan since no decimals are requested.  Increase `N = 100e3;` (see the [GitHub Gist][5]).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.mathworks.com/help/matlab/ref/sprintf.html&#xD;&#xA;  [2]: http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&#xD;&#xA;  [3]: http://www.mathworks.com/help/matlab/ref/textscan.html&#xD;&#xA;  [4]: https://gist.github.com/chappjc/a038a74945d84015e61b&#xD;&#xA;  [5]: https://gist.github.com/chappjc/a038a74945d84015e61b&#xD;&#xA;";;update timeit script, tweak textscan
76173810;26538681;2778484;5;1dd20c40-687d-4e07-a441-97c565284d8f;2014-10-24 00:34:54.0;"I'd apply [`sprintf`][1] with a [comma-separated list][2] input to generate a single, fully-delimited 1D string (with delimiter at end of each line/string), and then use [`textscan`][3] to pull out the integers:&#xD;&#xA;&#xD;&#xA;**extractIntsSprintfTextScan.m**&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    s = sprintf('%s_',list_of_words{:});                     &#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    % C = textscan(s,'%u','Delimiter','_','CollectOutput',1); % can also use %d for signed&#xD;&#xA;    C = textscan(s,'%.0f_','CollectOutput',1); % a little faster to put _ in the pattern&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    M = reshape(C{1},[],numel(list_of_words)).'; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;**Benchmarks**&#xD;&#xA;&#xD;&#xA;Using [this test script][4] employing the suggested usage of referee_timing.m:&#xD;&#xA;&#xD;&#xA;    >> test_all_numscan&#xD;&#xA;    Generating 10000-words test case...&#xD;&#xA;    Timing 10000-words test case...&#xD;&#xA;      eval_and_loops_solution: 0.142077[s]&#xD;&#xA;      single_sscanf_solution: 0.122814[s]&#xD;&#xA;      approach1: 0.041537[s]&#xD;&#xA;      extractIntsSprintfTextScan: 0.028834[s]&#xD;&#xA;    Generating 100000-words test case...&#xD;&#xA;    Timing 100000-words test case...&#xD;&#xA;      eval_and_loops_solution: 1.419922[s]&#xD;&#xA;      single_sscanf_solution: 1.360235[s]&#xD;&#xA;      approach1: 0.365403[s]&#xD;&#xA;      extractIntsSprintfTextScan: 0.266433[s]&#xD;&#xA;    Generating 1000000-words test case...&#xD;&#xA;    Timing 1000000-words test case...&#xD;&#xA;      eval_and_loops_solution: 14.393876[s]&#xD;&#xA;      single_sscanf_solution: 15.704821[s]&#xD;&#xA;      approach1: 3.506668[s]&#xD;&#xA;      extractIntsSprintfTextScan: 2.663703[s]&#xD;&#xA;&#xD;&#xA;Each method scales roughly linearly.&#xD;&#xA;&#xD;&#xA;**Machine**&#xD;&#xA;&#xD;&#xA;>MATLAB R2014b 64-bit <br>&#xD;&#xA;>Windows 7 64-bit <br>&#xD;&#xA;>24 GB RAM <br>&#xD;&#xA;>Dual Xeon X5550 (2.67GHZ, 8 physical cores) <br>&#xD;&#xA;&#xD;&#xA;**UPDATE**: Change output type to double from an integer type. Re-run benchmarks.<br>&#xD;&#xA;**UPDATE 2**: Change format specifier from '%f' to '%.0f', maybe allowing it to speed up the scan since no decimals are requested.  Increase `N = 100e3;` (see the [GitHub Gist][5]).<br>&#xD;&#xA;**UPDATE 3**: New benchmarks with version 2 of CST-Link's timing functions (see _new_ [GitHub Gist](https://gist.github.com/chappjc/702a645b12040acfce81) with suggested usage of referee_timing.m).&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.mathworks.com/help/matlab/ref/sprintf.html&#xD;&#xA;  [2]: http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&#xD;&#xA;  [3]: http://www.mathworks.com/help/matlab/ref/textscan.html&#xD;&#xA;  [4]: https://gist.github.com/chappjc/702a645b12040acfce81&#xD;&#xA;  [5]: https://gist.github.com/chappjc/a038a74945d84015e61b";;new benchmarks
76175679;26538681;2778484;5;d17dd541-c28a-420b-8b3e-6f4d9f74b123;2014-10-24 01:46:10.0;"I'd apply [`sprintf`][1] with a [comma-separated list][2] input to generate a single, fully-delimited 1D string (with delimiter at end of each line/string), and then use [`textscan`][3] to pull out the integers:&#xD;&#xA;&#xD;&#xA;**extractIntsSprintfTextScan.m**&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    s = sprintf('%s_',list_of_words{:});                     &#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    % C = textscan(s,'%u','Delimiter','_','CollectOutput',1); % can also use %d for signed&#xD;&#xA;    C = textscan(s,'%.0f_','CollectOutput',1); % a little faster to put _ in the pattern&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    M = reshape(C{1},[],numel(list_of_words)).'; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;**Benchmarks**&#xD;&#xA;&#xD;&#xA;Using [this test script][4] employing the suggested usage of referee_timing.m:&#xD;&#xA;&#xD;&#xA;    >> test_all_numscan&#xD;&#xA;    Generating 10000-words test case...&#xD;&#xA;    Timing 10000-words test case...&#xD;&#xA;      eval_and_loops_solution: 0.140765[s]&#xD;&#xA;      single_sscanf_solution: 0.135370[s]&#xD;&#xA;      approach1: 0.052128[s]&#xD;&#xA;      char_and_sscanf_solution: 0.052780[s]&#xD;&#xA;      extractIntsSprintfTextScan: 0.029823[s]&#xD;&#xA;    Generating 100000-words test case...&#xD;&#xA;    Timing 100000-words test case...&#xD;&#xA;      eval_and_loops_solution: 1.394298[s]&#xD;&#xA;      single_sscanf_solution: 2.086825[s]&#xD;&#xA;      approach1: 0.374700[s]&#xD;&#xA;      char_and_sscanf_solution: 0.469578[s]&#xD;&#xA;      extractIntsSprintfTextScan: 0.269174[s]&#xD;&#xA;    Generating 1000000-words test case...&#xD;&#xA;    Timing 1000000-words test case...&#xD;&#xA;      eval_and_loops_solution: 14.030377[s]&#xD;&#xA;      single_sscanf_solution: 22.006002[s]&#xD;&#xA;      approach1: 3.664675[s]&#xD;&#xA;      char_and_sscanf_solution: 4.793918[s]&#xD;&#xA;      extractIntsSprintfTextScan: 2.672005[s]&#xD;&#xA;&#xD;&#xA;Each method scales roughly linearly.&#xD;&#xA;&#xD;&#xA;**Machine**&#xD;&#xA;&#xD;&#xA;>MATLAB R2014b 64-bit <br>&#xD;&#xA;>Windows 7 64-bit <br>&#xD;&#xA;>24 GB RAM <br>&#xD;&#xA;>Dual Xeon X5550 (2.67GHZ, 8 physical cores) <br>&#xD;&#xA;&#xD;&#xA;**UPDATE**: Change output type to double from an integer type. Re-run benchmarks.<br>&#xD;&#xA;**UPDATE 2**: Change format specifier from '%f' to '%.0f', maybe allowing it to speed up the scan since no decimals are requested.  Increase `N = 100e3;` (see the [GitHub Gist][5]).<br>&#xD;&#xA;**UPDATE 3**: New benchmarks with version 2 of CST-Link's timing functions (see _new_ [GitHub Gist](https://gist.github.com/chappjc/702a645b12040acfce81) with suggested usage of referee_timing.m).<br>&#xD;&#xA;**UPDATE 4**:  Add Luis' solution.  Note that the results fluctuate since the data is randomly generated.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.mathworks.com/help/matlab/ref/sprintf.html&#xD;&#xA;  [2]: http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&#xD;&#xA;  [3]: http://www.mathworks.com/help/matlab/ref/textscan.html&#xD;&#xA;  [4]: https://gist.github.com/chappjc/702a645b12040acfce81&#xD;&#xA;  [5]: https://gist.github.com/chappjc/a038a74945d84015e61b";;add Luis' solution
76207794;26538681;;5;65d5f70f-8893-40a9-b4e9-6bdd2233b6a0;2014-10-24 13:21:44.0;"I'd apply [`sprintf`][1] with a [comma-separated list][2] input to generate a single, fully-delimited 1D string (with delimiter at end of each line/string), and then use [`textscan`][3] to pull out the integers:&#xD;&#xA;&#xD;&#xA;**extractIntsSprintfTextScan.m**&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    s = sprintf('%s_',list_of_words{:});                     &#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    % C = textscan(s,'%u','Delimiter','_','CollectOutput',1); % can also use %d for signed&#xD;&#xA;    C = textscan(s,'%.0f_','CollectOutput',1); % a little faster to put _ in the pattern&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    M = reshape(C{1},[],numel(list_of_words)).'/1000; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;**Benchmarks**&#xD;&#xA;&#xD;&#xA;Using [this test script][4] employing the suggested usage of referee_timing.m:&#xD;&#xA;&#xD;&#xA;    >> test_all_numscan&#xD;&#xA;    Generating 10000-words test case...&#xD;&#xA;    Timing 10000-words test case...&#xD;&#xA;      eval_and_loops_solution: 0.140765[s]&#xD;&#xA;      single_sscanf_solution: 0.135370[s]&#xD;&#xA;      approach1: 0.052128[s]&#xD;&#xA;      char_and_sscanf_solution: 0.052780[s]&#xD;&#xA;      extractIntsSprintfTextScan: 0.029823[s]&#xD;&#xA;    Generating 100000-words test case...&#xD;&#xA;    Timing 100000-words test case...&#xD;&#xA;      eval_and_loops_solution: 1.394298[s]&#xD;&#xA;      single_sscanf_solution: 2.086825[s]&#xD;&#xA;      approach1: 0.374700[s]&#xD;&#xA;      char_and_sscanf_solution: 0.469578[s]&#xD;&#xA;      extractIntsSprintfTextScan: 0.269174[s]&#xD;&#xA;    Generating 1000000-words test case...&#xD;&#xA;    Timing 1000000-words test case...&#xD;&#xA;      eval_and_loops_solution: 14.030377[s]&#xD;&#xA;      single_sscanf_solution: 22.006002[s]&#xD;&#xA;      approach1: 3.664675[s]&#xD;&#xA;      char_and_sscanf_solution: 4.793918[s]&#xD;&#xA;      extractIntsSprintfTextScan: 2.672005[s]&#xD;&#xA;&#xD;&#xA;Each method scales roughly linearly.&#xD;&#xA;&#xD;&#xA;**Machine**&#xD;&#xA;&#xD;&#xA;>MATLAB R2014b 64-bit <br>&#xD;&#xA;>Windows 7 64-bit <br>&#xD;&#xA;>24 GB RAM <br>&#xD;&#xA;>Dual Xeon X5550 (2.67GHZ, 8 physical cores) <br>&#xD;&#xA;&#xD;&#xA;**UPDATE**: Change output type to double from an integer type. Re-run benchmarks.<br>&#xD;&#xA;**UPDATE 2**: Change format specifier from '%f' to '%.0f', maybe allowing it to speed up the scan since no decimals are requested.  Increase `N = 100e3;` (see the [GitHub Gist][5]).<br>&#xD;&#xA;**UPDATE 3**: New benchmarks with version 2 of CST-Link's timing functions (see _new_ [GitHub Gist](https://gist.github.com/chappjc/702a645b12040acfce81) with suggested usage of referee_timing.m).<br>&#xD;&#xA;**UPDATE 4**:  Add Luis' solution.  Note that the results fluctuate since the data is randomly generated.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.mathworks.com/help/matlab/ref/sprintf.html&#xD;&#xA;  [2]: http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&#xD;&#xA;  [3]: http://www.mathworks.com/help/matlab/ref/textscan.html&#xD;&#xA;  [4]: https://gist.github.com/chappjc/702a645b12040acfce81&#xD;&#xA;  [5]: https://gist.github.com/chappjc/a038a74945d84015e61b";user2271770;added 5 characters in body
76256957;26538681;2778484;5;004eecf4-41da-4285-a8b6-819474a8d5af;2014-10-25 06:18:40.0;"I'd apply [`sprintf`][1] with a [comma-separated list][2] input to generate a single, fully-delimited 1D string (with delimiter at end of each line/string), and then use [`textscan`][3] to pull out the integers:&#xD;&#xA;&#xD;&#xA;**extractIntsSprintfTextScan.m**&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;&#xD;&#xA;    % optimized lines, see below for explanation of each op&#xD;&#xA;    M = textscan(sprintf('%s_',C{:}),'%.0f', 'Delimiter','_');&#xD;&#xA;    M = reshape(M{1}, [], numel(C)).';&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    % s = sprintf('%s_',list_of_words{:});&#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    % C = textscan(s,'%u','Delimiter','_','CollectOutput',1); % can also use %d for signed&#xD;&#xA;    % C = textscan(s,'%.0f_','CollectOutput',1); % a little faster to put _ in the pattern&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    % M = reshape(C{1},[],numel(list_of_words)).'/1000; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;**Benchmarks (previous timings now stale, see `sprintf`+`textscan` solution in [Amro's benchmark post][4] instead)**&#xD;&#xA;&#xD;&#xA;**Machine**&#xD;&#xA;&#xD;&#xA;>MATLAB R2014b 64-bit <br>&#xD;&#xA;>Windows 7 64-bit <br>&#xD;&#xA;>24 GB RAM <br>&#xD;&#xA;>Dual Xeon X5550 (2.67GHZ, 8 physical cores) <br>&#xD;&#xA;&#xD;&#xA;**UPDATE**: Change output type to double from an integer type. Re-run benchmarks.<br>&#xD;&#xA;**UPDATE 2**: Change format specifier from '%f' to '%.0f', maybe allowing it to speed up the scan since no decimals are requested.  Increase `N = 100e3;` (see the [GitHub Gist][6]).<br>&#xD;&#xA;**UPDATE 3**: New benchmarks with version 2 of CST-Link's timing functions (see _new_ [GitHub Gist](https://gist.github.com/chappjc/702a645b12040acfce81) with suggested usage of referee_timing.m).<br>&#xD;&#xA;**UPDATE 4**:  Add Luis' solution.  Note that the results fluctuate since the data is randomly generated.&#xD;&#xA;**UPDATE 5**: Optimization tweaks -- see Amro's benchmarking post.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.mathworks.com/help/matlab/ref/sprintf.html&#xD;&#xA;  [2]: http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&#xD;&#xA;  [3]: http://www.mathworks.com/help/matlab/ref/textscan.html&#xD;&#xA;  [4]: http://stackoverflow.com/a/26552087/2778484&#xD;&#xA;  [5]: https://gist.github.com/chappjc/702a645b12040acfce81&#xD;&#xA;  [6]: https://gist.github.com/chappjc/a038a74945d84015e61b";;deleted 663 characters in body
147078846;26538681;-1;5;8e868551-7567-4058-aceb-e4aaafbff46c;2017-05-23 12:10:51.0;"I'd apply [`sprintf`][1] with a [comma-separated list][2] input to generate a single, fully-delimited 1D string (with delimiter at end of each line/string), and then use [`textscan`][3] to pull out the integers:&#xD;&#xA;&#xD;&#xA;**extractIntsSprintfTextScan.m**&#xD;&#xA;&#xD;&#xA;    function M = extractIntsSprintfTextScan(list_of_words)&#xD;&#xA;&#xD;&#xA;    % optimized lines, see below for explanation of each op&#xD;&#xA;    M = textscan(sprintf('%s_',C{:}),'%.0f', 'Delimiter','_');&#xD;&#xA;    M = reshape(M{1}, [], numel(C)).';&#xD;&#xA;    &#xD;&#xA;    % cell to string, adding _ suffix&#xD;&#xA;    % s = sprintf('%s_',list_of_words{:});&#xD;&#xA;&#xD;&#xA;    % extract integers given _ as delimiter&#xD;&#xA;    % C = textscan(s,'%u','Delimiter','_','CollectOutput',1); % can also use %d for signed&#xD;&#xA;    % C = textscan(s,'%.0f_','CollectOutput',1); % a little faster to put _ in the pattern&#xD;&#xA;&#xD;&#xA;    % matrix form&#xD;&#xA;    % M = reshape(C{1},[],numel(list_of_words)).'/1000; % remove transpose for faster output&#xD;&#xA;    &#xD;&#xA;    end&#xD;&#xA;&#xD;&#xA;**Benchmarks (previous timings now stale, see `sprintf`+`textscan` solution in [Amro's benchmark post][4] instead)**&#xD;&#xA;&#xD;&#xA;**Machine**&#xD;&#xA;&#xD;&#xA;>MATLAB R2014b 64-bit <br>&#xD;&#xA;>Windows 7 64-bit <br>&#xD;&#xA;>24 GB RAM <br>&#xD;&#xA;>Dual Xeon X5550 (2.67GHZ, 8 physical cores) <br>&#xD;&#xA;&#xD;&#xA;**UPDATE**: Change output type to double from an integer type. Re-run benchmarks.<br>&#xD;&#xA;**UPDATE 2**: Change format specifier from '%f' to '%.0f', maybe allowing it to speed up the scan since no decimals are requested.  Increase `N = 100e3;` (see the [GitHub Gist][6]).<br>&#xD;&#xA;**UPDATE 3**: New benchmarks with version 2 of CST-Link's timing functions (see _new_ [GitHub Gist](https://gist.github.com/chappjc/702a645b12040acfce81) with suggested usage of referee_timing.m).<br>&#xD;&#xA;**UPDATE 4**:  Add Luis' solution.  Note that the results fluctuate since the data is randomly generated.&#xD;&#xA;**UPDATE 5**: Optimization tweaks -- see Amro's benchmarking post.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://www.mathworks.com/help/matlab/ref/sprintf.html&#xD;&#xA;  [2]: http://www.mathworks.com/help/matlab/matlab_prog/comma-separated-lists.html&#xD;&#xA;  [3]: http://www.mathworks.com/help/matlab/ref/textscan.html&#xD;&#xA;  [4]: https://stackoverflow.com/a/26552087/2778484&#xD;&#xA;  [5]: https://gist.github.com/chappjc/702a645b12040acfce81&#xD;&#xA;  [6]: https://gist.github.com/chappjc/a038a74945d84015e61b";;replaced http://stackoverflow.com/ with https://stackoverflow.com/
