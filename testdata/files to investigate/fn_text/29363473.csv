Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
87054071;29363473;4723364;2;9d7f5850-3f3f-477b-a778-ff7a1541e9f1;2015-03-31 07:57:20.0;"I have never done multithreading (which I think is what I need, but I'm not sure), and don't really understand how, which I think will be apparent by the end of this question ...&#xD;&#xA;&#xD;&#xA;I have made a GUI in Java with JButtons and such, and when the user clicks on a specific button, I want to pass control of the GUI to a different class, so that the 2nd class can alter/update the GUI. Then, after the user clicks on a different button (put on the GUI by the 2nd class), it will return control of the GUI to the first class.&#xD;&#xA;&#xD;&#xA;This is what I have tried, but it does not behave correctly:&#xD;&#xA;&#xD;&#xA;FirstClass:&#xD;&#xA;&#xD;&#xA;    public class FirstClass implements ActionListener&#xD;&#xA;    {&#xD;&#xA;        //Declare and initialize variables up here&#xD;&#xA;&#xD;&#xA;        public static void main(String[] args)&#xD;&#xA;        {&#xD;&#xA;            SwingUtilities.invokeLater(new Runnable()&#xD;&#xA;    		{&#xD;&#xA;	    		public void run()&#xD;&#xA;	    		{&#xD;&#xA;	    			new FirstClass();&#xD;&#xA;	    		}&#xD;&#xA;    		});&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        FirstClass()&#xD;&#xA;        {&#xD;&#xA;            //Create GUI&#xD;&#xA;            //Do stuff&#xD;&#xA;            updateGUI();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void updateGUI()&#xD;&#xA;        {&#xD;&#xA;            //remove old components&#xD;&#xA;            //add new components&#xD;&#xA;            panel.revalidate();&#xD;&#xA;            panel.repaint();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void actionPerformed(ActionEvent e)&#xD;&#xA;        {&#xD;&#xA;            if(user clicks on correct button)&#xD;&#xA;            {&#xD;&#xA;                OtherClass.getGUI(frame, panel, ...); //pass all GUI components&#xD;&#xA;                OtherClass.doStuff();&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            while(OtherClass.done == false)&#xD;&#xA;	    	{&#xD;&#xA;	    		try&#xD;&#xA;		    	{&#xD;&#xA;		    		Thread.sleep(1000);&#xD;&#xA;		    	}&#xD;&#xA;		    	catch (InterruptedException e1)&#xD;&#xA;			    {&#xD;&#xA;				e1.printStackTrace();&#xD;&#xA;		    	}&#xD;&#xA;	    	}&#xD;&#xA;&#xD;&#xA;            //FirstClass does more stuff&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And the OtherClass is:&#xD;&#xA;&#xD;&#xA;    public class OtherClass implements ActionListener&#xD;&#xA;    {&#xD;&#xA;        public boolean done = false;&#xD;&#xA;        public JFrame frame;&#xD;&#xA;        public JPanel panel;&#xD;&#xA;&#xD;&#xA;        public getGUI(JFrame frame, JPanel panel, ...)&#xD;&#xA;        {&#xD;&#xA;            this.frame = frame;&#xD;&#xA;            this.panel = frame;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void doStuff()&#xD;&#xA;        {&#xD;&#xA;            //Do some stuff&#xD;&#xA;            Update GUI();&#xD;&#xA;            //Do some more stuff&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void updateGUI()&#xD;&#xA;        {&#xD;&#xA;            //remove old components&#xD;&#xA;            //add new components&#xD;&#xA;            panel.revalidate();&#xD;&#xA;            panel.repaint();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void actionPerformed(ActionEvent e)&#xD;&#xA;        {&#xD;&#xA;            if(user clicks on correct button)&#xD;&#xA;            {&#xD;&#xA;                done = true&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;When I run this the GUI freezes  on the line&#xD;&#xA;&#xD;&#xA;    if(user clicks on correct button) //From the FirstClass&#xD;&#xA;&#xD;&#xA;so I never get an updated GUI when I call updateGUI() from the OtherClass.&#xD;&#xA;&#xD;&#xA;Note: I copied the UpdateGUI() method from my first class, and it works perfectly there, so I know the method works. It's just that the screen doesn't actually change.&#xD;&#xA;&#xD;&#xA;If more detailed code is needed I can provide that. The true code is over 1000 lines long, so I created a much more simplified version for the purposes of asking the question.&#xD;&#xA;&#xD;&#xA;Thanks so much in advance!!!";;
87091216;29363473;4723364;5;fc4e305a-b93a-41b4-b013-8593406b48a3;2015-03-31 16:20:05.0;"I have never done multithreading (which I think is what I need, but I'm not sure), and don't really understand how, which I think will be apparent by the end of this question ...&#xD;&#xA;&#xD;&#xA;I have made a GUI in Java with JButtons and such, and when the user clicks on a specific button, I want to pass control of the GUI to a different class, so that the 2nd class can alter/update the GUI. Then, after the user clicks on a different button (put on the GUI by the 2nd class), it will return control of the GUI to the first class.&#xD;&#xA;&#xD;&#xA;This is what I have tried, but it does not behave correctly:&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    import java.awt.BorderLayout;&#xD;&#xA;    import java.awt.event.ActionEvent;&#xD;&#xA;    import java.awt.event.ActionListener;&#xD;&#xA;&#xD;&#xA;    import javax.swing.JButton;&#xD;&#xA;    import javax.swing.JFrame;&#xD;&#xA;    import javax.swing.JPanel;&#xD;&#xA;    import javax.swing.JTable;&#xD;&#xA;    import javax.swing.JTextArea;&#xD;&#xA;    import javax.swing.JTextPane;&#xD;&#xA;    import javax.swing.SwingUtilities;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public class Addition implements ActionListener&#xD;&#xA;    {&#xD;&#xA;	public JFrame window;&#xD;&#xA;	public JPanel windowContents;&#xD;&#xA;	public JTextArea windowDialog;&#xD;&#xA;	public JButton[] buttons;&#xD;&#xA;	public int i = 1;&#xD;&#xA;	&#xD;&#xA;	public Subtraction subtract;&#xD;&#xA;	&#xD;&#xA;	public static void main(String[] args)&#xD;&#xA;	{&#xD;&#xA;		SwingUtilities.invokeLater(new Runnable()&#xD;&#xA;		{&#xD;&#xA;			public void run()&#xD;&#xA;			{&#xD;&#xA;				new Addition();&#xD;&#xA;			}&#xD;&#xA;		});&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	Addition ()&#xD;&#xA;	{&#xD;&#xA;		window = new JFrame();&#xD;&#xA;		windowContents = new JPanel();&#xD;&#xA;		windowDialog = new JTextArea();&#xD;&#xA;		buttons = new JButton[2];&#xD;&#xA;		buttons[0] = new JButton();&#xD;&#xA;		buttons[1] = new JButton();&#xD;&#xA;		subtract = new Subtraction();&#xD;&#xA;		&#xD;&#xA;		window.setSize(300, 300);&#xD;&#xA;		windowDialog.setText(""Click on a button below. The current value is "" + i);&#xD;&#xA;		buttons[0].setText(""Click me to add 1"");&#xD;&#xA;		buttons[1].setText(""Click me to change control"");&#xD;&#xA;		buttons[0].addActionListener(this);&#xD;&#xA;		buttons[1].addActionListener(this);&#xD;&#xA;		&#xD;&#xA;		windowContents.add(windowDialog);&#xD;&#xA;		windowContents.add(buttons[0]);&#xD;&#xA;		windowContents.add(buttons[1]);&#xD;&#xA;		&#xD;&#xA;		window.add(windowContents);&#xD;&#xA;		window.setVisible(true);&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	public void updateGUI()&#xD;&#xA;	{&#xD;&#xA;		windowDialog.setText(""Click on a button below. The current value is "" + i);&#xD;&#xA;		windowDialog.revalidate();&#xD;&#xA;		windowDialog.repaint();&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;	public void actionPerformed(ActionEvent e)&#xD;&#xA;	&#xD;&#xA;	{&#xD;&#xA;		if(e.getSource() == buttons[0])&#xD;&#xA;		{&#xD;&#xA;			i = i + 1;&#xD;&#xA;			updateGUI();&#xD;&#xA;		}&#xD;&#xA;		else if(e.getSource() == buttons[1])&#xD;&#xA;		{&#xD;&#xA;			subtract.getGUI(window, windowContents, buttons, windowDialog, i);&#xD;&#xA;			subtract.takeControl();&#xD;&#xA;			&#xD;&#xA;			while(subtract.done == false)&#xD;&#xA;			{&#xD;&#xA;				try&#xD;&#xA;				{&#xD;&#xA;					Thread.sleep(1000);&#xD;&#xA;				}&#xD;&#xA;				catch (InterruptedException e1)&#xD;&#xA;				{&#xD;&#xA;					e1.printStackTrace();&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;			&#xD;&#xA;			System.out.println(""Final int = "" + i);&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;And for the 2nd class:&#xD;&#xA;&#xD;&#xA;    import java.awt.event.ActionEvent;&#xD;&#xA;    import java.awt.event.ActionListener;&#xD;&#xA;&#xD;&#xA;    import javax.swing.JButton;&#xD;&#xA;    import javax.swing.JFrame;&#xD;&#xA;    import javax.swing.JPanel;&#xD;&#xA;    import javax.swing.JTextArea;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public class Subtraction implements ActionListener&#xD;&#xA;    {&#xD;&#xA;	public JFrame window;&#xD;&#xA;	public JPanel windowContents;&#xD;&#xA;	public JTextArea windowDialog;&#xD;&#xA;	public JButton[] buttons;&#xD;&#xA;	public int i;&#xD;&#xA;	public boolean done;&#xD;&#xA;	&#xD;&#xA;	public void getGUI(JFrame window, JPanel windowContents, JButton[] buttons, JTextArea windowDialog, int i)&#xD;&#xA;	{&#xD;&#xA;		this.window = window;&#xD;&#xA;		this.windowContents = windowContents;&#xD;&#xA;		this.windowDialog = windowDialog;&#xD;&#xA;		this.buttons = buttons;&#xD;&#xA;		this.i = i;&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	public void takeControl()&#xD;&#xA;	{&#xD;&#xA;		done = false;&#xD;&#xA;		buttons[0].setText(""Click me to subtract 1"");&#xD;&#xA;		buttons[1].setText(""Click me to change control back to addition"");&#xD;&#xA;		updateGUI();&#xD;&#xA;	}&#xD;&#xA;	&#xD;&#xA;	public void updateGUI()&#xD;&#xA;	{&#xD;&#xA;		windowDialog.setText(""Click on a button below. The current value is "" + i);&#xD;&#xA;		windowDialog.revalidate();&#xD;&#xA;		windowDialog.repaint();&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;	public void actionPerformed(ActionEvent e)&#xD;&#xA;	{&#xD;&#xA;		if(e.getSource() == buttons[0])&#xD;&#xA;		{&#xD;&#xA;			i = i - 1;&#xD;&#xA;			updateGUI();&#xD;&#xA;		}&#xD;&#xA;		else if(e.getSource() == buttons[2])&#xD;&#xA;		{&#xD;&#xA;			done = true;&#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;When I run this the GUI freezes  on the line&#xD;&#xA;&#xD;&#xA;    if(e.getSource == buttons[1]) //From the Addition Class&#xD;&#xA;&#xD;&#xA;so I never get an updated GUI when I call updateGUI() from the OtherClass.&#xD;&#xA;&#xD;&#xA;Note: I copied the UpdateGUI() method from my first class, and it works perfectly there, so I know the method works. It's just that the screen doesn't actually change.&#xD;&#xA;&#xD;&#xA;Note 2: I know that this code could be done much better through just 1 class called ""Math"" or something like that, but this isn't my actual project. My actual project is over 1000 lines long and the GUI does need to be handled by 2 classes. In order not to burden readers with 1000+ lines of code, I have made a simple program that behaves the same way, just to illustrate what happens and what the problem is.&#xD;&#xA;&#xD;&#xA;Thanks so much in advance!!!";;added 1645 characters in body
