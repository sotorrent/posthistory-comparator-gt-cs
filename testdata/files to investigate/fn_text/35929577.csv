Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
112935041;35929577;4999394;2;24357a62-edbc-4319-b94d-9e070a15cdf6;2016-03-10 23:45:09.0;"Remove `run()` here&#xD;&#xA;&#xD;&#xA;     public T1() {run();}&#xD;&#xA;&#xD;&#xA;will become&#xD;&#xA;&#xD;&#xA;    public T1() {}&#xD;&#xA;&#xD;&#xA;Same is the case with `T2()` constructor. Remove `rum()` method there as explained above. &#xD;&#xA;&#xD;&#xA;Change main method from&#xD;&#xA;&#xD;&#xA;    public static void main(String[] args) {&#xD;&#xA;        T1 t1 = new T1();&#xD;&#xA;        T2 t2 = new T2();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;to &#xD;&#xA;&#xD;&#xA;    public static void main(String[] args) {&#xD;&#xA;        T1 t1 = new T1();&#xD;&#xA;        t1.start();&#xD;&#xA;        T2 t2 = new T2();&#xD;&#xA;        t2.start();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read oracle [documentation][1] on how to start thread. run() method should be invoked by java virtual machine and not by code. You just have to call `start()` method, which in-turn calls `run()` method&#xD;&#xA;&#xD;&#xA;    public void start()&#xD;&#xA;&#xD;&#xA;> Causes this thread to begin execution; the **Java Virtual Machine** calls the run method of this thread.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#start--";;
112935293;35929577;4999394;5;fa0bfc26-59f4-4d53-88b1-b363cfae0f84;2016-03-10 23:51:24.0;"Remove `run()` call in `constructors` of both `T1 and T2 classes`.&#xD;&#xA;&#xD;&#xA;In `T1` constructor, Change code from&#xD;&#xA;&#xD;&#xA;     public T1() {run();}&#xD;&#xA;&#xD;&#xA;to&#xD;&#xA;&#xD;&#xA;    public T1() {}&#xD;&#xA;&#xD;&#xA;Same is the case with `T2()` constructor. Remove `run()` method  as explained above. &#xD;&#xA;&#xD;&#xA;Change main method from&#xD;&#xA;&#xD;&#xA;    public static void main(String[] args) {&#xD;&#xA;        T1 t1 = new T1();&#xD;&#xA;        T2 t2 = new T2();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;to &#xD;&#xA;&#xD;&#xA;    public static void main(String[] args) {&#xD;&#xA;        T1 t1 = new T1();&#xD;&#xA;        t1.start();&#xD;&#xA;        T2 t2 = new T2();&#xD;&#xA;        t2.start();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read oracle [documentation][1] on how to start thread. run() method should be invoked by java virtual machine and not by code. You just have to call `start()` method, which in-turn calls `run()` method&#xD;&#xA;&#xD;&#xA;    public void start()&#xD;&#xA;&#xD;&#xA;> Causes this thread to begin execution; the **Java Virtual Machine** calls the run method of this thread.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#start--";;Added more details
112935730;35929577;4999394;5;d2869e16-8b90-455a-87d6-f630eca8c3f2;2016-03-11 00:01:43.0;"**Issue:** `T1` and `T2` have not been started as threads.  Since you have directly invoked run() method instead of start() method, things are not working as expected.&#xD;&#xA;&#xD;&#xA;Once t1  object is created, you are calling `run()` method in constructor, which in-turn calls `sleep()` in infinite `while` loop. Next statement to create t2 object has not been invoked at all.  &#xD;&#xA;&#xD;&#xA;**Fix:** Remove `run()` call in `constructors` of both `T1 and T2 classes` and call `start()` on these two threads.&#xD;&#xA;&#xD;&#xA;In `T1` constructor, Change code from&#xD;&#xA;&#xD;&#xA;     public T1() {run();}&#xD;&#xA;&#xD;&#xA;to&#xD;&#xA;&#xD;&#xA;    public T1() {}&#xD;&#xA;&#xD;&#xA;Same is the case with `T2()` constructor. Remove `run()` method  as explained above. &#xD;&#xA;&#xD;&#xA;Change main method from&#xD;&#xA;&#xD;&#xA;    public static void main(String[] args) {&#xD;&#xA;        T1 t1 = new T1();&#xD;&#xA;        T2 t2 = new T2();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;to &#xD;&#xA;&#xD;&#xA;    public static void main(String[] args) {&#xD;&#xA;        T1 t1 = new T1();&#xD;&#xA;        t1.start();&#xD;&#xA;        T2 t2 = new T2();&#xD;&#xA;        t2.start();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Read oracle [documentation][1] on how to start thread. run() method should be invoked by java virtual machine and not by code. You just have to call `start()` method, which in-turn calls `run()` method&#xD;&#xA;&#xD;&#xA;    public void start()&#xD;&#xA;&#xD;&#xA;> Causes this thread to begin execution; the **Java Virtual Machine** calls the run method of this thread.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#start--";;Added more details
