Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
20452784;9037142;583044;2;c578a3e8-a2a4-439d-983f-9ff0e79981c9;2012-01-27 17:01:29.0;"See [this][1] related question on how to build the DLL.&#xD;&#xA;&#xD;&#xA;Your library code as it stands does not export any symbols and your executable does not import the symbols from your library. A typical pattern for doing that is shown below but you might want to read up on that first.&#xD;&#xA;&#xD;&#xA;mylib.h:&#xD;&#xA;&#xD;&#xA;    #ifndef MYLIB_H&#xD;&#xA;    #define MYLIB_H&#xD;&#xA;&#xD;&#xA;    #if defined(BUILDING_MYLIB)&#xD;&#xA;    #define MYLIB_API __declspec(dllexport)&#xD;&#xA;    #else&#xD;&#xA;    #define MYLIB_API __declspec(dllexport)&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    MYLIB_API int helloworld(void);&#xD;&#xA;&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;The code could then look like this:&#xD;&#xA;mylib.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;&#xD;&#xA;    MYLIB_API int helloworld(void)&#xD;&#xA;    {&#xD;&#xA;        printf(""Hello World DLL"");&#xD;&#xA;        return 42;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;You'd build your DLL using the following command line:&#xD;&#xA;&#xD;&#xA;    cl /DBUILDING_MYLIB mylib.c /LD&#xD;&#xA;&#xD;&#xA;You could then code your application so that it used your library header with the imported version of your DLL function:&#xD;&#xA;&#xD;&#xA;main.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;&#xD;&#xA;    int main(void)&#xD;&#xA;    {&#xD;&#xA;        helloworld();&#xD;&#xA;        return (0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Which you could then compile with the following command line:&#xD;&#xA;&#xD;&#xA;    cl main.c /link mylib.lib&#xD;&#xA;&#xD;&#xA;The command lines I've shown here are pretty much the absolute minimum you'd need but it'll allow you to create a DLL and link an application to it.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/1130479/how-to-build-a-dll-from-the-command-line-in-windows-using-msvc";;
20453030;9037142;583044;5;b9c687fc-86f5-46e8-8679-0642d7d8d3f8;2012-01-27 17:09:29.0;"See [this][1] related question on how to build the DLL.&#xD;&#xA;&#xD;&#xA;Your library code as it stands does not export any symbols and your executable does not import the symbols from your library. A typical pattern for doing that is shown below but you might want to read up on that first.&#xD;&#xA;&#xD;&#xA;mylib.h:&#xD;&#xA;&#xD;&#xA;    #ifndef MYLIB_H&#xD;&#xA;    #define MYLIB_H&#xD;&#xA;&#xD;&#xA;    #if defined(BUILDING_MYLIB)&#xD;&#xA;    #define MYLIB_API __declspec(dllexport)&#xD;&#xA;    #else&#xD;&#xA;    #define MYLIB_API __declspec(dllexport)&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    MYLIB_API int helloworld(void);&#xD;&#xA;&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;The code could then look like this:&#xD;&#xA;mylib.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;&#xD;&#xA;    MYLIB_API int helloworld(void)&#xD;&#xA;    {&#xD;&#xA;        printf(""Hello World DLL"");&#xD;&#xA;        return 42;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;You'd build your DLL using the following command line. As well as creating the DLL it will create the import library (.lib) required to use your DLL from another executable (as well as the export file, but that is only required in [certain circumstances][2]):&#xD;&#xA;&#xD;&#xA;    cl /DBUILDING_MYLIB mylib.c /LD&#xD;&#xA;&#xD;&#xA;You could then code your application so that it used your library header with the imported version of your DLL function:&#xD;&#xA;&#xD;&#xA;main.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;&#xD;&#xA;    int main(void)&#xD;&#xA;    {&#xD;&#xA;        helloworld();&#xD;&#xA;        return (0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Which you could then compile with the following command line (assuming the import library from the DLL creation is in the same directory as your main.c):&#xD;&#xA;&#xD;&#xA;    cl main.c /link mylib.lib&#xD;&#xA;&#xD;&#xA;The command lines I've shown here are pretty much the absolute minimum you'd need but it'll allow you to create a DLL and link an application to it.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/1130479/how-to-build-a-dll-from-the-command-line-in-windows-using-msvc&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/se8y7dcs%28v=vs.100%29.aspx";;Explicitly mentioned .lib as per Mark Ransom's comment.
20453382;9037142;583044;5;5d9a965f-0cdf-40f7-8cb5-1950cbfdd1f5;2012-01-27 17:19:18.0;"See [this][1] related question on how to build the DLL.&#xD;&#xA;&#xD;&#xA;Your library code as it stands does not export any symbols and your executable does not import the symbols from your library. A typical pattern for doing that is shown below but you might want to read up on that first.&#xD;&#xA;&#xD;&#xA;mylib.h:&#xD;&#xA;&#xD;&#xA;    #ifndef MYLIB_H&#xD;&#xA;    #define MYLIB_H&#xD;&#xA;&#xD;&#xA;    #if defined(BUILDING_MYLIB)&#xD;&#xA;    #define MYLIB_API __declspec(dllexport)&#xD;&#xA;    #else&#xD;&#xA;    #define MYLIB_API __declspec(dllexport)&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    MYLIB_API int helloworld(void);&#xD;&#xA;&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;The code could then look like this:&#xD;&#xA;mylib.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;&#xD;&#xA;    MYLIB_API int helloworld(void)&#xD;&#xA;    {&#xD;&#xA;        printf(""Hello World DLL"");&#xD;&#xA;        return 42;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;You'd build your DLL using the following command line. As well as creating the DLL it will create the import library (.lib) required to use your DLL from another executable (as well as the export file, but that is only required in [certain circumstances][2]):&#xD;&#xA;&#xD;&#xA;    cl /DBUILDING_MYLIB mylib.c /LD&#xD;&#xA;&#xD;&#xA;The `/DBUILDING_MYLIB` argument defines the preprocessor symbol used to control whether the functions in the DLL are exports (if it is defined) or imports (not defined). So you'd define it when building the DLL but not when building your application.&#xD;&#xA;&#xD;&#xA;The `/LD` parameter tells cl to produce a DLL.&#xD;&#xA;&#xD;&#xA;You could then code your application so that it used your library header with the imported version of your DLL function:&#xD;&#xA;&#xD;&#xA;main.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;&#xD;&#xA;    int main(void)&#xD;&#xA;    {&#xD;&#xA;        helloworld();&#xD;&#xA;        return (0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Which you could then compile with the following command line (assuming the import library from the DLL creation is in the same directory as your main.c):&#xD;&#xA;&#xD;&#xA;    cl main.c /link mylib.lib&#xD;&#xA;&#xD;&#xA;Arguments passed after the `/link` argument are passed onto the linker command line as they appear, so as just a filename it is used as extra input to link into the executable. In this case we specify the import library generated when we built the DLL.&#xD;&#xA;&#xD;&#xA;The command lines I've shown here are pretty much the absolute minimum you'd need but it'll allow you to create a DLL and link an application to it.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/1130479/how-to-build-a-dll-from-the-command-line-in-windows-using-msvc&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/se8y7dcs%28v=vs.100%29.aspx";;added 560 characters in body
20454308;9037142;583044;5;e8093865-49d2-4feb-923c-b99e25d90e1b;2012-01-27 17:49:42.0;"See [this][1] related question on how to build the DLL.&#xD;&#xA;&#xD;&#xA;Your library code as it stands does not export any symbols and your executable does not import the symbols from your library. Two typical patterns for doing that are shown below but you might want to read up on that first.&#xD;&#xA;&#xD;&#xA;The first method uses __declspec() to declare in the code what functions (or other items) are exported from your DLL and imported by other executables. You use a header file to declare the exported items and have a preprocessor flag used to control whether the symbols are exports or imports:&#xD;&#xA;&#xD;&#xA;mylib.h:&#xD;&#xA;&#xD;&#xA;    #ifndef MYLIB_H&#xD;&#xA;    #define MYLIB_H&#xD;&#xA;&#xD;&#xA;    #if defined(BUILDING_MYLIB)&#xD;&#xA;    #define MYLIB_API __declspec(dllexport)&#xD;&#xA;    #else&#xD;&#xA;    #define MYLIB_API __declspec(dllexport)&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    MYLIB_API int helloworld(void);&#xD;&#xA;&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;The code could then look like this:&#xD;&#xA;mylib.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;&#xD;&#xA;    MYLIB_API int helloworld(void)&#xD;&#xA;    {&#xD;&#xA;        printf(""Hello World DLL"");&#xD;&#xA;        return 42;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;You'd build your DLL using the following command line. As well as creating the DLL it will create the import library (.lib) required to use your DLL from another executable (as well as the export file, but that is only required in [certain circumstances][2]):&#xD;&#xA;&#xD;&#xA;    cl /DBUILDING_MYLIB mylib.c /LD&#xD;&#xA;&#xD;&#xA;The `/DBUILDING_MYLIB` argument defines the preprocessor symbol used to control whether the functions in the DLL are exports (if it is defined) or imports (not defined). So you'd define it when building the DLL but not when building your application.&#xD;&#xA;&#xD;&#xA;The `/LD` parameter tells cl to produce a DLL.&#xD;&#xA;&#xD;&#xA;The second method is to use [module definition files][3] as mentioned in the comments. You can use the code you already have but you also need to create the module definition file. At it's simplest it looks like this:&#xD;&#xA;&#xD;&#xA;    LIBRARY   mylib&#xD;&#xA;    EXPORTS&#xD;&#xA;       helloworld&#xD;&#xA;&#xD;&#xA;In this case to build the DLL you require the following command line:&#xD;&#xA;&#xD;&#xA;    cl /LD mylib.c /link /DLL /DEF:mylib.def&#xD;&#xA;&#xD;&#xA;You could then code your application so that it used your library header with the imported version of your DLL function:&#xD;&#xA;&#xD;&#xA;main.c&#xD;&#xA;&#xD;&#xA;    /* No need to include this if you went the module definition&#xD;&#xA;     * route, but you will need to add the function prototype.&#xD;&#xA;     */&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;&#xD;&#xA;    int main(void)&#xD;&#xA;    {&#xD;&#xA;        helloworld();&#xD;&#xA;        return (0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Which you could then compile with the following command line (assuming the import library from the DLL creation is in the same directory as your main.c). This step is the same whether you used declspec or module definition files:&#xD;&#xA;&#xD;&#xA;    cl main.c /link mylib.lib&#xD;&#xA;&#xD;&#xA;Arguments passed after the `/link` argument are passed onto the linker command line as they appear, so as just a filename it is used as extra input to link into the executable. In this case we specify the import library generated when we built the DLL.&#xD;&#xA;&#xD;&#xA;The command lines I've shown here are pretty much the absolute minimum you'd need but it'll allow you to create a DLL and link an application to it.&#xD;&#xA;&#xD;&#xA;I have assumed the calling convention is correct in all of the above and I have not experimented much to see whether I got it wrong at any point.&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/1130479/how-to-build-a-dll-from-the-command-line-in-windows-using-msvc&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/se8y7dcs%28v=vs.100%29.aspx&#xD;&#xA;  [3]: http://msdn.microsoft.com/en-us/library/d91k01sh%28v=vs.100%29.aspx";;added 1135 characters in body
20454541;9037142;583044;5;74ad96da-b8e3-4451-8925-f8e469aeafa5;2012-01-27 17:57:21.0;"See [this][1] related question on how to build the DLL.&#xD;&#xA;&#xD;&#xA;Your library code as it stands does not export any symbols and your executable does not import the symbols from your library. Two typical patterns for doing that are shown below but you might want to read up on that first.&#xD;&#xA;&#xD;&#xA;The first method uses __declspec() to declare in the code what functions (or other items) are exported from your DLL and imported by other executables. You use a header file to declare the exported items and have a preprocessor flag used to control whether the symbols are exports or imports:&#xD;&#xA;&#xD;&#xA;mylib.h:&#xD;&#xA;&#xD;&#xA;    #ifndef MYLIB_H&#xD;&#xA;    #define MYLIB_H&#xD;&#xA;&#xD;&#xA;    #if defined(BUILDING_MYLIB)&#xD;&#xA;    #define MYLIB_API __declspec(dllexport) __stdcall&#xD;&#xA;    #else&#xD;&#xA;    #define MYLIB_API __declspec(dllexport) __stdcall&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    extern ""C"" {&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    int MYLIB_API helloworld(void);&#xD;&#xA;&#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    }&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;I have also specifically set the calling convention to __stdcall as are most DLL functions (I could have used WINAPI instead of __stdcall if I had included windows.h) and have declared the functions as extern ""C"" so their names do not get mangled when compiled as C++. Not such a problem here as it's all C, but if you were to build the DLL from C source and then try to use it from a C++ executable then the imported names would be incorrect.&#xD;&#xA;&#xD;&#xA;The code could then look like this:&#xD;&#xA;mylib.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;&#xD;&#xA;    int MYLIB_API helloworld(void)&#xD;&#xA;    {&#xD;&#xA;        printf(""Hello World DLL"");&#xD;&#xA;        return 42;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;You'd build your DLL using the following command line. As well as creating the DLL it will create the import library (.lib) required to use your DLL from another executable (as well as the export file, but that is only required in [certain circumstances][2]):&#xD;&#xA;&#xD;&#xA;    cl /DBUILDING_MYLIB mylib.c /LD&#xD;&#xA;&#xD;&#xA;The `/DBUILDING_MYLIB` argument defines the preprocessor symbol used to control whether the functions in the DLL are exports (if it is defined) or imports (not defined). So you'd define it when building the DLL but not when building your application.&#xD;&#xA;&#xD;&#xA;The `/LD` parameter tells cl to produce a DLL.&#xD;&#xA;&#xD;&#xA;The second method is to use [module definition files][3] as mentioned in the comments. You can use the code you already have but you also need to create the module definition file. At it's simplest it looks like this:&#xD;&#xA;&#xD;&#xA;    LIBRARY   mylib&#xD;&#xA;    EXPORTS&#xD;&#xA;       helloworld&#xD;&#xA;&#xD;&#xA;In this case to build the DLL you require the following command line:&#xD;&#xA;&#xD;&#xA;    cl /LD mylib.c /link /DEF:mylib.def&#xD;&#xA;&#xD;&#xA;You could then code your application so that it used your library header with the imported version of your DLL function:&#xD;&#xA;&#xD;&#xA;main.c&#xD;&#xA;&#xD;&#xA;    /* No need to include this if you went the module definition&#xD;&#xA;     * route, but you will need to add the function prototype.&#xD;&#xA;     */&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;&#xD;&#xA;    int main(void)&#xD;&#xA;    {&#xD;&#xA;        helloworld();&#xD;&#xA;        return (0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Which you could then compile with the following command line (assuming the import library from the DLL creation is in the same directory as your main.c). This step is the same whether you used declspec or module definition files:&#xD;&#xA;&#xD;&#xA;    cl main.c /link mylib.lib&#xD;&#xA;&#xD;&#xA;Arguments passed after the `/link` argument are passed onto the linker command line as they appear, so as just a filename it is used as extra input to link into the executable. In this case we specify the import library generated when we built the DLL.&#xD;&#xA;&#xD;&#xA;The command lines I've shown here are pretty much the absolute minimum you'd need but it'll allow you to create a DLL and link an application to it.&#xD;&#xA;&#xD;&#xA;I have assumed the calling convention is correct in all of the above and I have not experimented much to see whether I got it wrong at any point.&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/1130479/how-to-build-a-dll-from-the-command-line-in-windows-using-msvc&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/se8y7dcs%28v=vs.100%29.aspx&#xD;&#xA;  [3]: http://msdn.microsoft.com/en-us/library/d91k01sh%28v=vs.100%29.aspx";;Updated following Ben Voigt comment
20456844;9037142;583044;5;a20dd00c-8583-4857-a421-63d711f21cab;2012-01-27 19:12:54.0;"See [this][1] related question on how to build the DLL.&#xD;&#xA;&#xD;&#xA;Your library code as it stands does not export any symbols and your executable does not import the symbols from your library. Two typical patterns for doing that are shown below but you might want to read up on that first.&#xD;&#xA;&#xD;&#xA;The first method uses __declspec() to declare in the code what functions (or other items) are exported from your DLL and imported by other executables. You use a header file to declare the exported items and have a preprocessor flag used to control whether the symbols are exports or imports:&#xD;&#xA;&#xD;&#xA;mylib.h:&#xD;&#xA;&#xD;&#xA;    #ifndef MYLIB_H&#xD;&#xA;    #define MYLIB_H&#xD;&#xA;&#xD;&#xA;    #if defined(BUILDING_MYLIB)&#xD;&#xA;    #define MYLIB_API __declspec(dllexport) __stdcall&#xD;&#xA;    #else&#xD;&#xA;    #define MYLIB_API __declspec(dllimport) __stdcall&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    extern ""C"" {&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    int MYLIB_API helloworld(void);&#xD;&#xA;&#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    }&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;I have also specifically set the calling convention to __stdcall as are most DLL functions (I could have used WINAPI instead of __stdcall if I had included windows.h) and have declared the functions as extern ""C"" so their names do not get mangled when compiled as C++. Not such a problem here as it's all C, but if you were to build the DLL from C source and then try to use it from a C++ executable then the imported names would be incorrect.&#xD;&#xA;&#xD;&#xA;The code could then look like this:&#xD;&#xA;mylib.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;&#xD;&#xA;    int MYLIB_API helloworld(void)&#xD;&#xA;    {&#xD;&#xA;        printf(""Hello World DLL"");&#xD;&#xA;        return 42;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;You'd build your DLL using the following command line. As well as creating the DLL it will create the import library (.lib) required to use your DLL from another executable (as well as the export file, but that is only required in [certain circumstances][2]):&#xD;&#xA;&#xD;&#xA;    cl /DBUILDING_MYLIB mylib.c /LD&#xD;&#xA;&#xD;&#xA;The `/DBUILDING_MYLIB` argument defines the preprocessor symbol used to control whether the functions in the DLL are exports (if it is defined) or imports (not defined). So you'd define it when building the DLL but not when building your application.&#xD;&#xA;&#xD;&#xA;The `/LD` parameter tells cl to produce a DLL.&#xD;&#xA;&#xD;&#xA;The second method is to use [module definition files][3] as mentioned in the comments. You can use the code you already have but you also need to create the module definition file. At it's simplest it looks like this:&#xD;&#xA;&#xD;&#xA;    LIBRARY   mylib&#xD;&#xA;    EXPORTS&#xD;&#xA;       helloworld&#xD;&#xA;&#xD;&#xA;In this case to build the DLL you require the following command line:&#xD;&#xA;&#xD;&#xA;    cl /LD mylib.c /link /DEF:mylib.def&#xD;&#xA;&#xD;&#xA;You could then code your application so that it used your library header with the imported version of your DLL function:&#xD;&#xA;&#xD;&#xA;main.c&#xD;&#xA;&#xD;&#xA;    /* No need to include this if you went the module definition&#xD;&#xA;     * route, but you will need to add the function prototype.&#xD;&#xA;     */&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;&#xD;&#xA;    int main(void)&#xD;&#xA;    {&#xD;&#xA;        helloworld();&#xD;&#xA;        return (0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Which you could then compile with the following command line (assuming the import library from the DLL creation is in the same directory as your main.c). This step is the same whether you used declspec or module definition files:&#xD;&#xA;&#xD;&#xA;    cl main.c /link mylib.lib&#xD;&#xA;&#xD;&#xA;Arguments passed after the `/link` argument are passed onto the linker command line as they appear, so as just a filename it is used as extra input to link into the executable. In this case we specify the import library generated when we built the DLL.&#xD;&#xA;&#xD;&#xA;The command lines I've shown here are pretty much the absolute minimum you'd need but it'll allow you to create a DLL and link an application to it.&#xD;&#xA;&#xD;&#xA;I have assumed the calling convention is correct in all of the above and I have not experimented much to see whether I got it wrong at any point.&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/1130479/how-to-build-a-dll-from-the-command-line-in-windows-using-msvc&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/se8y7dcs%28v=vs.100%29.aspx&#xD;&#xA;  [3]: http://msdn.microsoft.com/en-us/library/d91k01sh%28v=vs.100%29.aspx";;edited body
72377079;9037142;564181;5;f5a7f3e1-1c57-40d6-aaa5-925cffc8c158;2014-08-28 10:21:56.0;"See [this][1] related question on how to build the DLL.&#xD;&#xA;&#xD;&#xA;Your library code as it stands does not export any symbols and your executable does not import the symbols from your library. Two typical patterns for doing that are shown below but you might want to read up on that first.&#xD;&#xA;&#xD;&#xA;The first method uses `__declspec()` to declare in the code what functions (or other items) are exported from your DLL and imported by other executables. You use a header file to declare the exported items and have a preprocessor flag used to control whether the symbols are exports or imports:&#xD;&#xA;&#xD;&#xA;mylib.h:&#xD;&#xA;&#xD;&#xA;    #ifndef MYLIB_H&#xD;&#xA;    #define MYLIB_H&#xD;&#xA;&#xD;&#xA;    #if defined(BUILDING_MYLIB)&#xD;&#xA;    #define MYLIB_API __declspec(dllexport) __stdcall&#xD;&#xA;    #else&#xD;&#xA;    #define MYLIB_API __declspec(dllimport) __stdcall&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    extern ""C"" {&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    int MYLIB_API helloworld(void);&#xD;&#xA;&#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    }&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;I have also specifically set the calling convention to `__stdcall` as are most DLL functions (I could have used `WINAPI` instead of `__stdcall` if I had included windows.h) and have declared the functions as `extern ""C""` so their names do not get mangled when compiled as C++. Not such a problem here as it's all C, but if you were to build the DLL from C source and then try to use it from a C++ executable then the imported names would be incorrect.&#xD;&#xA;&#xD;&#xA;The code could then look like this:&#xD;&#xA;&#xD;&#xA;mylib.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;&#xD;&#xA;    int MYLIB_API helloworld(void)&#xD;&#xA;    {&#xD;&#xA;        printf(""Hello World DLL"");&#xD;&#xA;        return 42;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;You'd build your DLL using the following command line. As well as creating the DLL it will create the import library (.lib) required to use your DLL from another executable (as well as the export file, but that is only required in [certain circumstances][2]):&#xD;&#xA;&#xD;&#xA;    cl /DBUILDING_MYLIB mylib.c /LD&#xD;&#xA;&#xD;&#xA;The `/DBUILDING_MYLIB` argument defines the preprocessor symbol used to control whether the functions in the DLL are exports (if it is defined) or imports (not defined). So you'd define it when building the DLL but not when building your application.&#xD;&#xA;&#xD;&#xA;The `/LD` parameter tells cl to produce a DLL.&#xD;&#xA;&#xD;&#xA;The second method is to use [module definition files][3] as mentioned in the comments. You can use the code you already have but you also need to create the module definition file. At it's simplest it looks like this:&#xD;&#xA;&#xD;&#xA;    LIBRARY   mylib&#xD;&#xA;    EXPORTS&#xD;&#xA;       helloworld&#xD;&#xA;&#xD;&#xA;In this case to build the DLL you require the following command line:&#xD;&#xA;&#xD;&#xA;    cl /LD mylib.c /link /DEF:mylib.def&#xD;&#xA;&#xD;&#xA;You could then code your application so that it used your library header with the imported version of your DLL function:&#xD;&#xA;&#xD;&#xA;main.c&#xD;&#xA;&#xD;&#xA;    /* No need to include this if you went the module definition&#xD;&#xA;     * route, but you will need to add the function prototype.&#xD;&#xA;     */&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;&#xD;&#xA;    int main(void)&#xD;&#xA;    {&#xD;&#xA;        helloworld();&#xD;&#xA;        return (0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Which you could then compile with the following command line (assuming the import library from the DLL creation is in the same directory as your main.c). This step is the same whether you used declspec or module definition files:&#xD;&#xA;&#xD;&#xA;    cl main.c /link mylib.lib&#xD;&#xA;&#xD;&#xA;Arguments passed after the `/link` argument are passed onto the linker command line as they appear, so as just a filename it is used as extra input to link into the executable. In this case we specify the import library generated when we built the DLL.&#xD;&#xA;&#xD;&#xA;The command lines I've shown here are pretty much the absolute minimum you'd need but it'll allow you to create a DLL and link an application to it.&#xD;&#xA;&#xD;&#xA;I have assumed the calling convention is correct in all of the above and I have not experimented much to see whether I got it wrong at any point.&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/questions/1130479/how-to-build-a-dll-from-the-command-line-in-windows-using-msvc&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/se8y7dcs%28v=vs.100%29.aspx&#xD;&#xA;  [3]: http://msdn.microsoft.com/en-us/library/d91k01sh%28v=vs.100%29.aspx";;Wrapped a few inline code elements in `` to make it easier to read.
146394574;9037142;-1;5;b8ed7b16-b1f7-4a3f-9d25-4b531db3c181;2017-05-23 11:45:34.0;"See [this][1] related question on how to build the DLL.&#xD;&#xA;&#xD;&#xA;Your library code as it stands does not export any symbols and your executable does not import the symbols from your library. Two typical patterns for doing that are shown below but you might want to read up on that first.&#xD;&#xA;&#xD;&#xA;The first method uses `__declspec()` to declare in the code what functions (or other items) are exported from your DLL and imported by other executables. You use a header file to declare the exported items and have a preprocessor flag used to control whether the symbols are exports or imports:&#xD;&#xA;&#xD;&#xA;mylib.h:&#xD;&#xA;&#xD;&#xA;    #ifndef MYLIB_H&#xD;&#xA;    #define MYLIB_H&#xD;&#xA;&#xD;&#xA;    #if defined(BUILDING_MYLIB)&#xD;&#xA;    #define MYLIB_API __declspec(dllexport) __stdcall&#xD;&#xA;    #else&#xD;&#xA;    #define MYLIB_API __declspec(dllimport) __stdcall&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    extern ""C"" {&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    int MYLIB_API helloworld(void);&#xD;&#xA;&#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    }&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;    #endif&#xD;&#xA;&#xD;&#xA;I have also specifically set the calling convention to `__stdcall` as are most DLL functions (I could have used `WINAPI` instead of `__stdcall` if I had included windows.h) and have declared the functions as `extern ""C""` so their names do not get mangled when compiled as C++. Not such a problem here as it's all C, but if you were to build the DLL from C source and then try to use it from a C++ executable then the imported names would be incorrect.&#xD;&#xA;&#xD;&#xA;The code could then look like this:&#xD;&#xA;&#xD;&#xA;mylib.c&#xD;&#xA;&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;    #include <stdio.h>&#xD;&#xA;&#xD;&#xA;    int MYLIB_API helloworld(void)&#xD;&#xA;    {&#xD;&#xA;        printf(""Hello World DLL"");&#xD;&#xA;        return 42;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;You'd build your DLL using the following command line. As well as creating the DLL it will create the import library (.lib) required to use your DLL from another executable (as well as the export file, but that is only required in [certain circumstances][2]):&#xD;&#xA;&#xD;&#xA;    cl /DBUILDING_MYLIB mylib.c /LD&#xD;&#xA;&#xD;&#xA;The `/DBUILDING_MYLIB` argument defines the preprocessor symbol used to control whether the functions in the DLL are exports (if it is defined) or imports (not defined). So you'd define it when building the DLL but not when building your application.&#xD;&#xA;&#xD;&#xA;The `/LD` parameter tells cl to produce a DLL.&#xD;&#xA;&#xD;&#xA;The second method is to use [module definition files][3] as mentioned in the comments. You can use the code you already have but you also need to create the module definition file. At it's simplest it looks like this:&#xD;&#xA;&#xD;&#xA;    LIBRARY   mylib&#xD;&#xA;    EXPORTS&#xD;&#xA;       helloworld&#xD;&#xA;&#xD;&#xA;In this case to build the DLL you require the following command line:&#xD;&#xA;&#xD;&#xA;    cl /LD mylib.c /link /DEF:mylib.def&#xD;&#xA;&#xD;&#xA;You could then code your application so that it used your library header with the imported version of your DLL function:&#xD;&#xA;&#xD;&#xA;main.c&#xD;&#xA;&#xD;&#xA;    /* No need to include this if you went the module definition&#xD;&#xA;     * route, but you will need to add the function prototype.&#xD;&#xA;     */&#xD;&#xA;    #include ""mylib.h""&#xD;&#xA;&#xD;&#xA;    int main(void)&#xD;&#xA;    {&#xD;&#xA;        helloworld();&#xD;&#xA;        return (0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Which you could then compile with the following command line (assuming the import library from the DLL creation is in the same directory as your main.c). This step is the same whether you used declspec or module definition files:&#xD;&#xA;&#xD;&#xA;    cl main.c /link mylib.lib&#xD;&#xA;&#xD;&#xA;Arguments passed after the `/link` argument are passed onto the linker command line as they appear, so as just a filename it is used as extra input to link into the executable. In this case we specify the import library generated when we built the DLL.&#xD;&#xA;&#xD;&#xA;The command lines I've shown here are pretty much the absolute minimum you'd need but it'll allow you to create a DLL and link an application to it.&#xD;&#xA;&#xD;&#xA;I have assumed the calling convention is correct in all of the above and I have not experimented much to see whether I got it wrong at any point.&#xD;&#xA;&#xD;&#xA;  [1]: https://stackoverflow.com/questions/1130479/how-to-build-a-dll-from-the-command-line-in-windows-using-msvc&#xD;&#xA;  [2]: http://msdn.microsoft.com/en-us/library/se8y7dcs%28v=vs.100%29.aspx&#xD;&#xA;  [3]: http://msdn.microsoft.com/en-us/library/d91k01sh%28v=vs.100%29.aspx";;replaced http://stackoverflow.com/ with https://stackoverflow.com/
