Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
90930141;30355942;4253416;2;a97fb8f6-aece-4aad-ab52-c6789344dbd7;2015-05-20 16:56:27.0;"I've set up an interpreter in Pydev that calls a small script:&#xD;&#xA;&#xD;&#xA;    #!/bin/bash&#xD;&#xA;    WINEDEBUG=fixme-all WINEPREFIX=/home/dal/wine/Python wine C:\\\\Python27\\\\python.exe ""$@""&#xD;&#xA;&#xD;&#xA;to fire up an instance of the windows version of python (which I need in order to get to windows-only ODBC database drivers).&#xD;&#xA;This much works fine, I am able to start a console, run scripts using that interpreter etc.&#xD;&#xA;&#xD;&#xA;However - I now need to add a reference to a directory storing a bunch of modules that I need to access - however the windows version of python wants a PYTHONPATH that has elements separated by semicolons and in Z:\\\\home\\\\blah\\\\whatever format, rather that colons and /home/blah/whatever. &#xD;&#xA;&#xD;&#xA;Pydev won't let me add arbitrary paths in the preferences -> pydev -> interpreters -> libraries section (it wants me to find the path in a file picker, then creates a /home/blah/whatever string from what was picked). &#xD;&#xA;&#xD;&#xA;Attempting to use the enviroment tab to set PYTHONPATH to ${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need results in pydev telling me to forget about it (it won't let me set PYTHONPATH specifically from that dialog).&#xD;&#xA;&#xD;&#xA;Adding PYTHONPATH=${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need to the shell script which calls the windows version of python via wine was the last thing I could think of, but it causes something bad to happen:&#xD;&#xA;&#xD;&#xA;    Error initializing console.&#xD;&#xA;    Unexpected error connecting to console.&#xD;&#xA;    Failed to recive suitable Hello response from pydevconsole. Last msg  received: Failed to read server's response: Connection refused&#xD;&#xA;&#xD;&#xA;yup, it fails to recive.&#xD;&#xA;&#xD;&#xA;Gone through just about all the ideas I can come up with at this time of night, does anyone else have a thought on how to push this particular square peg through the round hole?&#xD;&#xA;";;
90930643;30355942;276949;5;3e798c0c-85cc-45e5-978e-6a5833a9908a;2015-05-20 17:04:37.0;"I've set up an interpreter in Pydev that calls a small script:&#xD;&#xA;&#xD;&#xA;    #!/bin/bash&#xD;&#xA;    WINEDEBUG=fixme-all WINEPREFIX=/home/dal/wine/Python wine C:\\\\Python27\\\\python.exe ""$@""&#xD;&#xA;&#xD;&#xA;to fire up an instance of the windows version of python (which I need in order to get to windows-only ODBC database drivers).&#xD;&#xA;This much works fine, I am able to start a console, run scripts using that interpreter etc.&#xD;&#xA;&#xD;&#xA;However - I now need to add a reference to a directory storing a bunch of modules that I need to access - however the windows version of python wants a PYTHONPATH that has elements separated by semicolons and in Z:\\\\home\\\\blah\\\\whatever format, rather that colons and /home/blah/whatever. &#xD;&#xA;&#xD;&#xA;Pydev won't let me add arbitrary paths in the preferences -> pydev -> interpreters -> libraries section (it wants me to find the path in a file picker, then creates a /home/blah/whatever string from what was picked). &#xD;&#xA;&#xD;&#xA;Attempting to use the enviroment tab to set PYTHONPATH to ${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need results in pydev telling me to forget about it (it won't let me set PYTHONPATH specifically from that dialog).&#xD;&#xA;&#xD;&#xA;Adding `PYTHONPATH=${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need` to the shell script which calls the windows version of python via wine was the last thing I could think of, but it causes something bad to happen:&#xD;&#xA;&#xD;&#xA;    Error initializing console.&#xD;&#xA;    Unexpected error connecting to console.&#xD;&#xA;    Failed to recive suitable Hello response from pydevconsole. Last msg  received: Failed to read server's response: Connection refused&#xD;&#xA;&#xD;&#xA;yup, it fails to recive.&#xD;&#xA;&#xD;&#xA;Gone through just about all the ideas I can come up with at this time of night, does anyone else have a thought on how to push this particular square peg through the round hole?&#xD;&#xA;";;added 2 characters in body
90931233;30355942;4253416;5;e1db3edb-b0e3-412e-b34e-38af202ea297;2015-05-20 17:13:39.0;"I've set up an interpreter in Pydev that calls a small script:&#xD;&#xA;&#xD;&#xA;    #!/bin/bash&#xD;&#xA;    WINEDEBUG=fixme-all WINEPREFIX=/home/dal/wine/Python wine C:\\\\Python27\\\\python.exe ""$@""&#xD;&#xA;&#xD;&#xA;to fire up an instance of the windows version of python (which I need in order to get to windows-only ODBC database drivers).&#xD;&#xA;This much works fine, I am able to start a console, run scripts using that interpreter etc.&#xD;&#xA;&#xD;&#xA;However - I now need to add a reference to a directory storing a bunch of modules that I need to access - however the windows version of python wants a PYTHONPATH that has elements separated by semicolons and in Z:\\\\home\\\\blah\\\\whatever format, rather that colons and /home/blah/whatever. &#xD;&#xA;&#xD;&#xA;Pydev won't let me add arbitrary paths in the preferences -> pydev -> interpreters -> libraries section (it wants me to find the path in a file picker, then creates a /home/blah/whatever string from what was picked). &#xD;&#xA;&#xD;&#xA;Attempting to use the enviroment tab to set PYTHONPATH to ${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need results in pydev telling me to forget about it (it won't let me set PYTHONPATH specifically from that dialog).&#xD;&#xA;&#xD;&#xA;Adding `PYTHONPATH=${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need` to the shell script which calls the windows version of python via wine was the last thing I could think of, but it causes something bad to happen:&#xD;&#xA;&#xD;&#xA;    Error initializing console.&#xD;&#xA;    Unexpected error connecting to console.&#xD;&#xA;    Failed to recive suitable Hello response from pydevconsole. Last msg  received: Failed to read server's response: Connection refused&#xD;&#xA;&#xD;&#xA;yup, it fails to recive.&#xD;&#xA;&#xD;&#xA;I can manually:&#xD;&#xA;&#xD;&#xA;    import sys&#xD;&#xA;    sys.path.append('Z:\\\\really\\\\long\\\\path\\\\that\\\\I\\\\dont\\\\want\\\\to\\\\type\\\\often')&#xD;&#xA;&#xD;&#xA;and things will work, but...&#xD;&#xA;&#xD;&#xA;Gone through just about all the ideas I can come up with at this time of night, does anyone else have a thought on how to push this particular square peg through the round hole?&#xD;&#xA;";;added 154 characters in body
90932544;30355942;4253416;5;0fb308a5-8456-4035-a5cc-1a72741c04d4;2015-05-20 17:31:18.0;"I've set up an interpreter in Pydev that calls a small script:&#xD;&#xA;&#xD;&#xA;    #!/bin/bash&#xD;&#xA;    WINEDEBUG=fixme-all WINEPREFIX=/home/dal/wine/Python wine C:\\\\Python27\\\\python.exe ""$@""&#xD;&#xA;&#xD;&#xA;to fire up an instance of the windows version of python (which I need in order to get to windows-only ODBC database drivers).&#xD;&#xA;This much works fine, I am able to start a console, run scripts using that interpreter etc.&#xD;&#xA;&#xD;&#xA;However - I now need to add a reference to a directory storing a bunch of modules that I need to access - however the windows version of python wants a PYTHONPATH that has elements separated by semicolons and in Z:\\\\home\\\\blah\\\\whatever format, rather that colons and /home/blah/whatever. &#xD;&#xA;&#xD;&#xA;Pydev won't let me add arbitrary paths in the preferences -> pydev -> interpreters -> libraries section (it wants me to find the path in a file picker, then creates a /home/blah/whatever string from what was picked). &#xD;&#xA;&#xD;&#xA;Attempting to use the enviroment tab to set PYTHONPATH to ${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need results in pydev telling me to forget about it (it won't let me set PYTHONPATH specifically from that dialog).&#xD;&#xA;&#xD;&#xA;Adding `PYTHONPATH=${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need` to the shell script which calls the windows version of python via wine was the last thing I could think of, but it causes something bad to happen:&#xD;&#xA;&#xD;&#xA;    Error initializing console.&#xD;&#xA;    Unexpected error connecting to console.&#xD;&#xA;    Failed to recive suitable Hello response from pydevconsole. Last msg  received: Failed to read server's response: Connection refused&#xD;&#xA;&#xD;&#xA;yup, it fails to recive.&#xD;&#xA;&#xD;&#xA;I can manually:&#xD;&#xA;&#xD;&#xA;    import sys&#xD;&#xA;    sys.path.append('Z:\\\\really\\\\long\\\\path\\\\that\\\\I\\\\dont\\\\want\\\\to\\\\type\\\\often')&#xD;&#xA;&#xD;&#xA;and things will work, but...I'd really like to not have to type that each time.&#xD;&#xA;&#xD;&#xA;putting the above in a file and pointing the PYTHONSTARTUP environmental variable at it solves that problem for a python instance running from the terminal, but the python instance running inside pydev doesn't seem to look at PYTHONSTARTUP at all&#xD;&#xA;&#xD;&#xA;Gone through just about all the ideas I can come up with at this time of night, does anyone else have a thought on how to push this particular square peg through the round hole?&#xD;&#xA;";;added 301 characters in body
90932992;30355942;4253416;5;54c2914f-6c0b-4541-871b-218337343310;2015-05-20 17:37:01.0;"I've set up an interpreter in Pydev that calls a small script:&#xD;&#xA;&#xD;&#xA;    #!/bin/bash&#xD;&#xA;    WINEDEBUG=fixme-all WINEPREFIX=/home/dal/wine/Python wine C:\\\\Python27\\\\python.exe ""$@""&#xD;&#xA;&#xD;&#xA;to fire up an instance of the windows version of python (which I need in order to get to windows-only ODBC database drivers).&#xD;&#xA;This much works fine, I am able to start a console, run scripts using that interpreter etc.&#xD;&#xA;&#xD;&#xA;However - I now need to add a reference to a directory storing a bunch of modules that I need to access - however the windows version of python wants a PYTHONPATH that has elements separated by semicolons and in Z:\\\\home\\\\blah\\\\whatever format, rather that colons and /home/blah/whatever. &#xD;&#xA;&#xD;&#xA;Pydev won't let me add arbitrary paths in the preferences -> pydev -> interpreters -> libraries section (it wants me to find the path in a file picker, then creates a /home/blah/whatever string from what was picked). &#xD;&#xA;&#xD;&#xA;Attempting to use the enviroment tab to set PYTHONPATH to ${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need results in pydev telling me to forget about it (it won't let me set PYTHONPATH specifically from that dialog).&#xD;&#xA;&#xD;&#xA;Adding `PYTHONPATH=${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need` to the shell script which calls the windows version of python via wine was the last thing I could think of, but it causes something bad to happen in pydev:&#xD;&#xA;&#xD;&#xA;    Error initializing console.&#xD;&#xA;    Unexpected error connecting to console.&#xD;&#xA;    Failed to recive suitable Hello response from pydevconsole. Last msg  received: Failed to read server's response: Connection refused&#xD;&#xA;&#xD;&#xA;yup, it fails to recive.&#xD;&#xA;&#xD;&#xA;I can manually:&#xD;&#xA;&#xD;&#xA;    import sys&#xD;&#xA;    sys.path.append(r'Z:\\really\\long\\path\\that\\I\\dont\\want\\to\\type\\often')&#xD;&#xA;&#xD;&#xA;and things will work, but...I'd really like to not have to type that each time.&#xD;&#xA;&#xD;&#xA;putting the above in a file and pointing the PYTHONSTARTUP environmental variable at it solves that problem for a python instance running from the terminal, but the python instance running inside pydev doesn't seem to look at PYTHONSTARTUP at all&#xD;&#xA;&#xD;&#xA;Gone through just about all the ideas I can come up with at this time of night, does anyone else have a thought on how to push this particular square peg through the round hole?&#xD;&#xA;";;added details of more attempts to solve issue
90934157;30355942;4253416;5;1832926e-f9b3-4141-9e6f-2e53da743b53;2015-05-20 17:52:16.0;"I've set up an interpreter in Pydev that calls a small script:&#xD;&#xA;&#xD;&#xA;    #!/bin/bash&#xD;&#xA;    WINEDEBUG=fixme-all WINEPREFIX=/home/dal/wine/Python wine C:\\\\Python27\\\\python.exe ""$@""&#xD;&#xA;&#xD;&#xA;to fire up an instance of the windows version of python (which I need in order to get to windows-only ODBC database drivers).&#xD;&#xA;This much works fine, I am able to start a console, run scripts using that interpreter etc.&#xD;&#xA;&#xD;&#xA;However - I now need to add a reference to a directory storing a bunch of modules that I need to access - however the windows version of python wants a PYTHONPATH that has elements separated by semicolons and in Z:\\\\home\\\\blah\\\\whatever format, rather that colons and /home/blah/whatever. &#xD;&#xA;&#xD;&#xA;Pydev won't let me add arbitrary paths in the preferences -> pydev -> interpreters -> libraries section (it wants me to find the path in a file picker, then creates a /home/blah/whatever string from what was picked). &#xD;&#xA;&#xD;&#xA;Attempting to use the enviroment tab to set PYTHONPATH to ${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need results in pydev telling me to forget about it (it won't let me set PYTHONPATH specifically from that dialog).&#xD;&#xA;&#xD;&#xA;Adding `PYTHONPATH=${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need` to the shell script which calls the windows version of python via wine was the last thing I could think of, but it causes something bad to happen in pydev:&#xD;&#xA;&#xD;&#xA;    Error initializing console.&#xD;&#xA;    Unexpected error connecting to console.&#xD;&#xA;    Failed to recive suitable Hello response from pydevconsole. Last msg  received: Failed to read server's response: Connection refused&#xD;&#xA;&#xD;&#xA;yup, it fails to recive.&#xD;&#xA;&#xD;&#xA;I can manually:&#xD;&#xA;&#xD;&#xA;    import sys&#xD;&#xA;    sys.path.append(r'Z:\\really\\long\\path\\that\\I\\dont\\want\\to\\type\\often')&#xD;&#xA;&#xD;&#xA;and things will work, but...I'd really like to not have to type that each time.&#xD;&#xA;&#xD;&#xA;putting the above in a file and pointing the PYTHONSTARTUP environmental variable at it solves that problem for a python instance running from the terminal, but the python instance running inside pydev doesn't seem to look at PYTHONSTARTUP at all&#xD;&#xA;&#xD;&#xA;Gone through just about all the ideas I can come up with at this time of night (short of simply importing the whole modules directory into every project I work on in pydev, which seems...inelegant, to say the least), does anyone else have a thought on how to push this particular square peg through the round hole?&#xD;&#xA;";;added 137 characters in body
90954263;30355942;4253416;5;e38de738-9938-4601-8af6-0b9893017a9c;2015-05-20 23:46:46.0;"I've set up an interpreter in Pydev that calls a small script:&#xD;&#xA;&#xD;&#xA;    #!/bin/bash&#xD;&#xA;    WINEDEBUG=fixme-all WINEPREFIX=/home/dal/wine/Python wine C:\\\\Python27\\\\python.exe ""$@""&#xD;&#xA;&#xD;&#xA;to fire up an instance of the windows version of python (which I need in order to get to windows-only ODBC database drivers).&#xD;&#xA;This much works fine, I am able to start a console, run scripts using that interpreter etc.&#xD;&#xA;&#xD;&#xA;However - I now need to add a reference to a directory storing a bunch of modules that I need to access - however the windows version of python wants a PYTHONPATH that has elements separated by semicolons and in Z:\\\\home\\\\blah\\\\whatever format, rather that colons and /home/blah/whatever. &#xD;&#xA;&#xD;&#xA;Pydev won't let me add arbitrary paths in the preferences -> pydev -> interpreters -> libraries section (it wants me to find the path in a file picker, then creates a /home/blah/whatever string from what was picked). &#xD;&#xA;&#xD;&#xA;Attempting to use the enviroment tab to set PYTHONPATH to ${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need results in pydev telling me to forget about it (it won't let me set PYTHONPATH specifically from that dialog).&#xD;&#xA;&#xD;&#xA;Adding `PYTHONPATH=${PYTHONPATH}\\;Z:\\\\path\\\\I\\\\need` to the shell script which calls the windows version of python via wine was the last thing I could think of, but it causes something bad to happen in pydev:&#xD;&#xA;&#xD;&#xA;    Error initializing console.&#xD;&#xA;    Unexpected error connecting to console.&#xD;&#xA;    Failed to recive suitable Hello response from pydevconsole. Last msg  received: Failed to read server's response: Connection refused&#xD;&#xA;&#xD;&#xA;yup, it fails to recive.&#xD;&#xA;&#xD;&#xA;I can manually:&#xD;&#xA;&#xD;&#xA;    import sys&#xD;&#xA;    sys.path.append(r'Z:\\really\\long\\path\\that\\I\\dont\\want\\to\\type\\often')&#xD;&#xA;&#xD;&#xA;and things will work, but...I'd really like to not have to type that each time.&#xD;&#xA;&#xD;&#xA;putting the above in a file and pointing the PYTHONSTARTUP environmental variable at it solves that problem for a python instance running from the terminal, but the python instance running inside pydev doesn't seem to look at PYTHONSTARTUP at all&#xD;&#xA;&#xD;&#xA;Gone through just about all the ideas I can come up with at this time of night (short of simply importing the whole modules directory into every project I work on in pydev, which seems...inelegant, to say the least), does anyone else have a thought on how to push this particular square peg through the round hole?&#xD;&#xA;&#xD;&#xA;Update: the module directory is actually mounted via sshfs, and with it in the pythonpath, launching an instance of the python interpreter from a terminal is somewhat slow (35sec ish). Attempting to launch a console from within pydev appears to time out in < 15sec, so I'm wondering if what's needed here is just some way to increase the amount of time it waits for a response from the interpreter it's trying to launch before giving up, and if the 'connection refused' message at the end of the output snippet means (as the rest of that snippet seems to suggest) 'connection not accepted before I gave up' more so than 'interpreter told me explicitly connection was not going to happen'?&#xD;&#xA;";;added 692 characters in body
