Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
99818857;32622837;4964612;2;85371b9c-3799-4083-ba72-8b7f227dc60a;2015-09-17 04:55:08.0;"I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;            let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;            let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;            descString.appendAttributedString(bountyStart)&#xD;&#xA;            descString.appendAttributedString(bountyDesc)&#xD;&#xA;            &#xD;&#xA;&#xD;&#xA;            let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;            descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;            if !(bounty.turtles == 0.0){&#xD;&#xA;                let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;                let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;                descString.appendAttributedString(turtleStart)&#xD;&#xA;                descString.appendAttributedString(turtleAmount)&#xD;&#xA;            }&#xD;&#xA;            descriptionLabel.attributedText = descString";;
99820066;32622837;3701067;5;3020f6c3-22b0-41b7-8356-8459286f5f05;2015-09-17 05:28:34.0;"I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;    descriptionLabel.attributedText = descString";;"formatting code for best understanding "
99822470;32622837;4964612;5;3ecae2fe-25aa-4ed4-b6f5-e4bdb09311e4;2015-09-17 06:23:37.0;"I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;I would post a picture of how it should look vs how it does look but I don't have the 10 reputation to do so.";;added 114 characters in body
99824956;32622837;4964612;5;99e95881-16d8-4503-a2e3-1c4b72011e08;2015-09-17 07:08:38.0;"I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/lD7wf.png";;added picture
99825367;32622837;4964612;5;1aef5435-4d13-46d0-bff3-45fb2a2ed0f4;2015-09-17 07:14:31.0;"I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Image of the constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/lD7wf.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/EdFw4.png";;added picture
99825743;32622837;4964612;5;6d325d98-1002-44e8-9a8c-7276daf09182;2015-09-17 07:21:46.0;"I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Image of the constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/lD7wf.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png";;edited body
99826890;32622837;4964612;5;ae3ee31a-a71c-409c-96a9-70ba8aa8a937;2015-09-17 07:40:00.0;"I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Image of the constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/lD7wf.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png";;added 2 characters in body
99828733;32622837;4964612;5;dfe553a5-72e3-4372-83e9-ae8db51ef24a;2015-09-17 08:08:56.0;"Note: Still not solved, desperate for an answer.&#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Image of the constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/lD7wf.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png";;added 52 characters in body
99834372;32622837;4964612;5;69a82dee-d8c0-4fb1-b923-10b414f157c5;2015-09-17 09:26:57.0;"Note: Still not solved, desperate for an answer, will pay someone $5 US for correct answer if they would like.&#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Image of the constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/lD7wf.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png";;added 62 characters in body
99853107;32622837;4964612;5;f22cabdf-ce54-4bcd-8e58-bfadebe58930;2015-09-17 13:38:18.0;"Note: Still not solved, desperate for an answer, will pay someone $5 US for correct answer if they would like.&#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show. It should appear after the ""is for noobs"" line. I've manipulated the white space to appear after the line instead of elsewhere by setting the problem labels bottom to constraint to be greater than or equal, and all other top to bottom constraints as equal to.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/lD7wf.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png";;added 260 characters in body
99853578;32622837;4964612;5;6590bb90-b2cf-49ce-aadd-27b71585e0cb;2015-09-17 13:43:38.0;"Note: Still not solved, desperate for an answer, will pay someone $5 US for correct answer if they would like.&#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show. It should appear after the ""is for noobs"" line. I've manipulated the white space to appear after the line instead of elsewhere by setting the problem labels bottom to constraint to be greater than or equal, and all other top to bottom constraints as equal to.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/2ArcS.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/sXnjr.png";;added 260 characters in body
99855277;32622837;4964612;5;61a7c603-b9b4-4271-973a-12a2b5ef2efe;2015-09-17 14:03:38.0;"Note: Still not solved, desperate for an answer, will pay someone $5 US for correct answer if they would like.&#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show. It should appear after the ""is for noobs"" line. I've manipulated the white space to appear after the line instead of elsewhere by setting the problem labels bottom to constraint to be greater than or equal, and all other top to bottom constraints as equal to.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I've been stumped for quite a while on this one, and I'm starting to think it's not the constraints I've set but something much deeper. All though I would love to be proven wrong.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/2ArcS.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/sXnjr.png";;added 181 characters in body
99902608;32622837;4964612;5;be2ad22d-4d27-4b42-ab40-992331ac3427;2015-09-18 05:36:14.0;"Note: Still not solved, desperate for an answer, will pay someone $5 US for correct answer if they would like.&#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show. It should appear after the ""is for noobs"" line. I've manipulated the white space to appear after the line instead of elsewhere by setting the problem labels bottom to constraint to be greater than or equal, and all other top to bottom constraints as equal to.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I've been stumped for quite a while on this one, and I'm starting to think it's not the constraints I've set but something much deeper. All though I would love to be proven wrong.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is my VC code.&#xD;&#xA;&#xD;&#xA;        import UIKit&#xD;&#xA;    &#xD;&#xA;    class TrendingVC: UIViewController, UITableViewDataSource, UITableViewDelegate{&#xD;&#xA;        &#xD;&#xA;        @IBOutlet weak var menubtn:UIBarButtonItem!&#xD;&#xA;        @IBOutlet var trendingTableView:UITableView!  &#xD;&#xA;        &#xD;&#xA;        var trendingToggle:Int = 0&#xD;&#xA;        let nwt = NWTrending()&#xD;&#xA;        let appUserId = NSUserDefaults.standardUserDefaults().stringForKey(""UserId"") ?? ""1"" //@TODO: remove ?? 1&#xD;&#xA;        var bountyArr: [Bounty] = []&#xD;&#xA;        var compArr: [Completion] = []&#xD;&#xA;        var peopleArr: [Person] = []&#xD;&#xA;        &#xD;&#xA;        var userId: String = ""0""&#xD;&#xA;        var username: String = """"&#xD;&#xA;        &#xD;&#xA;        let bountyCellIdentifier = ""BountyCellNew""&#xD;&#xA;        let personCellIdentifier = ""PersonCell""&#xD;&#xA;        let completedCellIdentifier = ""TrendingCompletedImageCell""&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        @IBAction func toggleTrending(sender:UISegmentedControl){&#xD;&#xA;            switch sender.selectedSegmentIndex{&#xD;&#xA;            case 0:&#xD;&#xA;                //loads the bounties on segmented control tab&#xD;&#xA;                trendingToggle=0&#xD;&#xA;                nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in //@TODO: change pos&#xD;&#xA;                    self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 1:&#xD;&#xA;                trendingToggle=1&#xD;&#xA;                nwt.getTrendingCompletions(appUserId, position: 0){(compArr, err) in&#xD;&#xA;                    self.compArr = compArr as [Completion]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 2:&#xD;&#xA;                trendingToggle=2&#xD;&#xA;                nwt.getTrendingPeople(appUserId, position: 0){(peopleArr, err) in&#xD;&#xA;                    self.peopleArr = peopleArr as [Person]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            default:&#xD;&#xA;                break&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            //reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewDidLoad() {&#xD;&#xA;            super.viewDidLoad()&#xD;&#xA;            &#xD;&#xA;            /******* Kyle Inserted *******/&#xD;&#xA;            //for followers and following back button text, you set it here for when you segue into that section&#xD;&#xA;            let backItem = UIBarButtonItem(title: "" "", style: UIBarButtonItemStyle.Plain, target: nil, action: nil)&#xD;&#xA;            navigationItem.backBarButtonItem = backItem&#xD;&#xA;            /******* END Kyle Inserted *******/&#xD;&#xA;            &#xD;&#xA;            &#xD;&#xA;            &#xD;&#xA;            &#xD;&#xA;            trendingTableView.allowsSelection = false;&#xD;&#xA;            trendingTableView.delegate = self&#xD;&#xA;            trendingTableView.dataSource = self&#xD;&#xA;            configureTableView()&#xD;&#xA;            &#xD;&#xA;            &#xD;&#xA;            //sidebar code&#xD;&#xA;            if self.revealViewController() != nil {&#xD;&#xA;                menubtn.target = self.revealViewController()&#xD;&#xA;                menubtn.action = ""revealToggle:""&#xD;&#xA;                self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        override func didReceiveMemoryWarning() {&#xD;&#xA;            super.didReceiveMemoryWarning()&#xD;&#xA;            // Dispose of any resources that can be recreated.&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewWillAppear(animated: Bool) {&#xD;&#xA;            super.viewWillAppear(animated)&#xD;&#xA;            deselectAllRows()&#xD;&#xA;            &#xD;&#xA;            //loads the bounty on segue&#xD;&#xA;            nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in&#xD;&#xA;                self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;                self.reloadTableViewContent()&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func configureTableView(){&#xD;&#xA;            trendingTableView.rowHeight = UITableViewAutomaticDimension&#xD;&#xA;            trendingTableView.estimatedRowHeight = 250.0&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func deselectAllRows() {&#xD;&#xA;            if let selectedRows = trendingTableView.indexPathsForSelectedRows() as? [NSIndexPath] {&#xD;&#xA;                for indexPath in selectedRows {&#xD;&#xA;                    trendingTableView.deselectRowAtIndexPath(indexPath, animated: false)&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func reloadTableViewContent() {&#xD;&#xA;            dispatch_async(dispatch_get_main_queue(), { () -> Void in&#xD;&#xA;                self.trendingTableView.reloadData()&#xD;&#xA;                println(""reloading table view content"")&#xD;&#xA;                self.trendingTableView.scrollRectToVisible(CGRectMake(0, 0, 1, 1), animated: false)&#xD;&#xA;            })&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func numberOfSectionsInTableView(tableView: UITableView) -> Int {&#xD;&#xA;            return 1&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, numberOfRowsInSection section: Int) -> Int {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;            return bountyArr.count&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return compArr.count&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                return peopleArr.count&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;                return bountyCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return completedCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else{&#xD;&#xA;            return personCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        //calls method to set and display each trending bounty cell&#xD;&#xA;        func bountyCellAtIndexPath(indexPath:NSIndexPath) -> BountyCellNew {&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(bountyCellIdentifier) as! BountyCellNew&#xD;&#xA;            var bounty = bountyArr[indexPath.row]&#xD;&#xA;            cell.setBountyCellTrending(bounty)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func completedCellAtIndexPath(indexPath:NSIndexPath) -> CompletedCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(completedCellIdentifier) as! CompletedCell&#xD;&#xA;            var comp = compArr[indexPath.row]&#xD;&#xA;            cell.setTrendingCompletedCell(comp)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func personCellAtIndexPath(indexPath:NSIndexPath) -> PersonCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(personCellIdentifier) as! PersonCell&#xD;&#xA;            var peop = peopleArr[indexPath.row]&#xD;&#xA;            cell.setTrendingPeopleCell(peop)&#xD;&#xA;            return cell&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/2ArcS.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/sXnjr.png";;added in VC code
99904141;32622837;4964612;5;9a30ec76-549b-47bd-ae8d-31a5997f60a2;2015-09-18 06:08:58.0;"Note: Still not solved, desperate for an answer, if I do solve this I will post here, until then, I'm going to keep debugging and checking this thread!&#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show. It should appear after the ""is for noobs"" line. I've manipulated the white space to appear after the line instead of elsewhere by setting the problem labels bottom to constraint to be greater than or equal, and all other top to bottom constraints as equal to.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I've been stumped for quite a while on this one, and I'm starting to think it's not the constraints I've set but something much deeper. All though I would love to be proven wrong.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is my VC code.&#xD;&#xA;&#xD;&#xA;        import UIKit&#xD;&#xA;    &#xD;&#xA;    class TrendingVC: UIViewController, UITableViewDataSource, UITableViewDelegate{&#xD;&#xA;        &#xD;&#xA;        @IBOutlet weak var menubtn:UIBarButtonItem!&#xD;&#xA;        @IBOutlet var trendingTableView:UITableView!  &#xD;&#xA;        &#xD;&#xA;        var trendingToggle:Int = 0&#xD;&#xA;        let nwt = NWTrending()&#xD;&#xA;        let appUserId = NSUserDefaults.standardUserDefaults().stringForKey(""UserId"") ?? ""1"" //@TODO: remove ?? 1&#xD;&#xA;        var bountyArr: [Bounty] = []&#xD;&#xA;        var compArr: [Completion] = []&#xD;&#xA;        var peopleArr: [Person] = []&#xD;&#xA;        &#xD;&#xA;        var userId: String = ""0""&#xD;&#xA;        var username: String = """"&#xD;&#xA;        &#xD;&#xA;        let bountyCellIdentifier = ""BountyCellNew""&#xD;&#xA;        let personCellIdentifier = ""PersonCell""&#xD;&#xA;        let completedCellIdentifier = ""TrendingCompletedImageCell""&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        @IBAction func toggleTrending(sender:UISegmentedControl){&#xD;&#xA;            switch sender.selectedSegmentIndex{&#xD;&#xA;            case 0:&#xD;&#xA;                //loads the bounties on segmented control tab&#xD;&#xA;                trendingToggle=0&#xD;&#xA;                nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in //@TODO: change pos&#xD;&#xA;                    self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 1:&#xD;&#xA;                trendingToggle=1&#xD;&#xA;                nwt.getTrendingCompletions(appUserId, position: 0){(compArr, err) in&#xD;&#xA;                    self.compArr = compArr as [Completion]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 2:&#xD;&#xA;                trendingToggle=2&#xD;&#xA;                nwt.getTrendingPeople(appUserId, position: 0){(peopleArr, err) in&#xD;&#xA;                    self.peopleArr = peopleArr as [Person]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            default:&#xD;&#xA;                break&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            //reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewDidLoad() {&#xD;&#xA;        super.viewDidLoad()&#xD;&#xA;        &#xD;&#xA;        trendingTableView.rowHeight = UITableViewAutomaticDimension&#xD;&#xA;        trendingTableView.estimatedRowHeight = 300.0&#xD;&#xA;        &#xD;&#xA;        /******* Kyle Inserted *******/&#xD;&#xA;        //for followers and following back button text, you set it here for when you segue into that section&#xD;&#xA;        let backItem = UIBarButtonItem(title: "" "", style: UIBarButtonItemStyle.Plain, target: nil, action: nil)&#xD;&#xA;        navigationItem.backBarButtonItem = backItem&#xD;&#xA;        /******* END Kyle Inserted *******/&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        trendingTableView.allowsSelection = false;&#xD;&#xA;        trendingTableView.delegate = self&#xD;&#xA;        trendingTableView.dataSource = self&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        //sidebar code&#xD;&#xA;        if self.revealViewController() != nil {&#xD;&#xA;            menubtn.target = self.revealViewController()&#xD;&#xA;            menubtn.action = ""revealToggle:""&#xD;&#xA;            self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        //loads the bounty on segue&#xD;&#xA;        nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in&#xD;&#xA;            self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;            self.reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        override func didReceiveMemoryWarning() {&#xD;&#xA;            super.didReceiveMemoryWarning()&#xD;&#xA;            // Dispose of any resources that can be recreated.&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewWillAppear(animated: Bool) {&#xD;&#xA;            super.viewWillAppear(animated)&#xD;&#xA;            //deselectAllRows()&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func deselectAllRows() {&#xD;&#xA;            if let selectedRows = trendingTableView.indexPathsForSelectedRows() as? [NSIndexPath] {&#xD;&#xA;                for indexPath in selectedRows {&#xD;&#xA;                    trendingTableView.deselectRowAtIndexPath(indexPath, animated: false)&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func reloadTableViewContent() {&#xD;&#xA;            dispatch_async(dispatch_get_main_queue(), { () -> Void in&#xD;&#xA;                self.trendingTableView.reloadData()&#xD;&#xA;                println(""reloading table view content"")&#xD;&#xA;                self.trendingTableView.scrollRectToVisible(CGRectMake(0, 0, 1, 1), animated: false)&#xD;&#xA;            })&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func numberOfSectionsInTableView(tableView: UITableView) -> Int {&#xD;&#xA;            return 1&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, numberOfRowsInSection section: Int) -> Int {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;            return bountyArr.count&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return compArr.count&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                return peopleArr.count&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;                return bountyCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return completedCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else{&#xD;&#xA;            return personCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        //calls method to set and display each trending bounty cell&#xD;&#xA;        func bountyCellAtIndexPath(indexPath:NSIndexPath) -> BountyCellNew {&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(bountyCellIdentifier) as! BountyCellNew&#xD;&#xA;            var bounty = bountyArr[indexPath.row]&#xD;&#xA;            cell.setBountyCellTrending(bounty)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func completedCellAtIndexPath(indexPath:NSIndexPath) -> CompletedCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(completedCellIdentifier) as! CompletedCell&#xD;&#xA;            var comp = compArr[indexPath.row]&#xD;&#xA;            cell.setTrendingCompletedCell(comp)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func personCellAtIndexPath(indexPath:NSIndexPath) -> PersonCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(personCellIdentifier) as! PersonCell&#xD;&#xA;            var peop = peopleArr[indexPath.row]&#xD;&#xA;            cell.setTrendingPeopleCell(peop)&#xD;&#xA;            return cell&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/2ArcS.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/sXnjr.png";;deleted 183 characters in body
99904554;32622837;4964612;5;e3967abb-27b9-46cc-86fc-53f040871b00;2015-09-18 06:16:53.0;"Note: Still not solved, desperate for an answer, if I do solve this I will post here, until then, I'm going to keep debugging and checking this thread!&#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show. It should appear after the ""is for noobs"" line. I've manipulated the white space to appear after the line instead of elsewhere by setting the problem labels bottom to constraint to be greater than or equal, and all other top to bottom constraints as equal to.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I've been stumped for quite a while on this one, and I'm starting to think it's not the constraints I've set but something much deeper. All though I would love to be proven wrong.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is my VC code.&#xD;&#xA;&#xD;&#xA;        import UIKit&#xD;&#xA;    &#xD;&#xA;    class TrendingVC: UIViewController, UITableViewDataSource, UITableViewDelegate{&#xD;&#xA;        &#xD;&#xA;        @IBOutlet weak var menubtn:UIBarButtonItem!&#xD;&#xA;        @IBOutlet var trendingTableView:UITableView!  &#xD;&#xA;        &#xD;&#xA;        var trendingToggle:Int = 0&#xD;&#xA;        let nwt = NWTrending()&#xD;&#xA;        let appUserId = NSUserDefaults.standardUserDefaults().stringForKey(""UserId"") ?? ""1"" //@TODO: remove ?? 1&#xD;&#xA;        var bountyArr: [Bounty] = []&#xD;&#xA;        var compArr: [Completion] = []&#xD;&#xA;        var peopleArr: [Person] = []&#xD;&#xA;        &#xD;&#xA;        var userId: String = ""0""&#xD;&#xA;        var username: String = """"&#xD;&#xA;        &#xD;&#xA;        let bountyCellIdentifier = ""BountyCellNew""&#xD;&#xA;        let personCellIdentifier = ""PersonCell""&#xD;&#xA;        let completedCellIdentifier = ""TrendingCompletedImageCell""&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        @IBAction func toggleTrending(sender:UISegmentedControl){&#xD;&#xA;            switch sender.selectedSegmentIndex{&#xD;&#xA;            case 0:&#xD;&#xA;                //loads the bounties on segmented control tab&#xD;&#xA;                trendingToggle=0&#xD;&#xA;                nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in //@TODO: change pos&#xD;&#xA;                    self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 1:&#xD;&#xA;                trendingToggle=1&#xD;&#xA;                nwt.getTrendingCompletions(appUserId, position: 0){(compArr, err) in&#xD;&#xA;                    self.compArr = compArr as [Completion]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 2:&#xD;&#xA;                trendingToggle=2&#xD;&#xA;                nwt.getTrendingPeople(appUserId, position: 0){(peopleArr, err) in&#xD;&#xA;                    self.peopleArr = peopleArr as [Person]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            default:&#xD;&#xA;                break&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            //reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewDidLoad() {&#xD;&#xA;        super.viewDidLoad()&#xD;&#xA;        &#xD;&#xA;        trendingTableView.estimatedRowHeight = 300.0&#xD;&#xA;        trendingTableView.rowHeight = UITableViewAutomaticDimension&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        /******* Kyle Inserted *******/&#xD;&#xA;        //for followers and following back button text, you set it here for when you segue into that section&#xD;&#xA;        let backItem = UIBarButtonItem(title: "" "", style: UIBarButtonItemStyle.Plain, target: nil, action: nil)&#xD;&#xA;        navigationItem.backBarButtonItem = backItem&#xD;&#xA;        /******* END Kyle Inserted *******/&#xD;&#xA;        &#xD;&#xA;        trendingTableView.allowsSelection = false;&#xD;&#xA;        trendingTableView.delegate = self&#xD;&#xA;        trendingTableView.dataSource = self&#xD;&#xA;        &#xD;&#xA;        //sidebar code&#xD;&#xA;        if self.revealViewController() != nil {&#xD;&#xA;            menubtn.target = self.revealViewController()&#xD;&#xA;            menubtn.action = ""revealToggle:""&#xD;&#xA;            self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        //loads the bounty on segue&#xD;&#xA;        nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in&#xD;&#xA;            self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;            self.reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        override func didReceiveMemoryWarning() {&#xD;&#xA;            super.didReceiveMemoryWarning()&#xD;&#xA;            // Dispose of any resources that can be recreated.&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewWillAppear(animated: Bool) {&#xD;&#xA;            super.viewWillAppear(animated)&#xD;&#xA;            //deselectAllRows()&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func deselectAllRows() {&#xD;&#xA;            if let selectedRows = trendingTableView.indexPathsForSelectedRows() as? [NSIndexPath] {&#xD;&#xA;                for indexPath in selectedRows {&#xD;&#xA;                    trendingTableView.deselectRowAtIndexPath(indexPath, animated: false)&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func reloadTableViewContent() {&#xD;&#xA;            dispatch_async(dispatch_get_main_queue(), { () -> Void in&#xD;&#xA;                self.trendingTableView.reloadData()&#xD;&#xA;                println(""reloading table view content"")&#xD;&#xA;                self.trendingTableView.scrollRectToVisible(CGRectMake(0, 0, 1, 1), animated: false)&#xD;&#xA;            })&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func numberOfSectionsInTableView(tableView: UITableView) -> Int {&#xD;&#xA;            return 1&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, numberOfRowsInSection section: Int) -> Int {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;            return bountyArr.count&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return compArr.count&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                return peopleArr.count&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;                return bountyCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return completedCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else{&#xD;&#xA;            return personCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        //calls method to set and display each trending bounty cell&#xD;&#xA;        func bountyCellAtIndexPath(indexPath:NSIndexPath) -> BountyCellNew {&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(bountyCellIdentifier) as! BountyCellNew&#xD;&#xA;            var bounty = bountyArr[indexPath.row]&#xD;&#xA;            cell.setBountyCellTrending(bounty)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func completedCellAtIndexPath(indexPath:NSIndexPath) -> CompletedCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(completedCellIdentifier) as! CompletedCell&#xD;&#xA;            var comp = compArr[indexPath.row]&#xD;&#xA;            cell.setTrendingCompletedCell(comp)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func personCellAtIndexPath(indexPath:NSIndexPath) -> PersonCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(personCellIdentifier) as! PersonCell&#xD;&#xA;            var peop = peopleArr[indexPath.row]&#xD;&#xA;            cell.setTrendingPeopleCell(peop)&#xD;&#xA;            return cell&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/2ArcS.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/sXnjr.png";;deleted 40 characters in body
100002071;32622837;4964612;5;aa2227e3-3217-47fb-85b2-33460569216f;2015-09-19 12:30:51.0;"Note: Still not solved, desperate for an answer, if I do solve this I will post here, until then, I'm going to keep debugging and checking this thread! &#xD;&#xA;&#xD;&#xA;I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show. It should appear after the ""is for noobs"" line. I've manipulated the white space to appear after the line instead of elsewhere by setting the problem labels bottom to constraint to be greater than or equal, and all other top to bottom constraints as equal to.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I've been stumped for quite a while on this one, and I'm starting to think it's not the constraints I've set but something much deeper. All though I would love to be proven wrong.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is my VC code.&#xD;&#xA;&#xD;&#xA;        import UIKit&#xD;&#xA;    &#xD;&#xA;    class TrendingVC: UIViewController, UITableViewDataSource, UITableViewDelegate{&#xD;&#xA;        &#xD;&#xA;        @IBOutlet weak var menubtn:UIBarButtonItem!&#xD;&#xA;        @IBOutlet var trendingTableView:UITableView!  &#xD;&#xA;        &#xD;&#xA;        var trendingToggle:Int = 0&#xD;&#xA;        let nwt = NWTrending()&#xD;&#xA;        let appUserId = NSUserDefaults.standardUserDefaults().stringForKey(""UserId"") ?? ""1"" //@TODO: remove ?? 1&#xD;&#xA;        var bountyArr: [Bounty] = []&#xD;&#xA;        var compArr: [Completion] = []&#xD;&#xA;        var peopleArr: [Person] = []&#xD;&#xA;        &#xD;&#xA;        var userId: String = ""0""&#xD;&#xA;        var username: String = """"&#xD;&#xA;        &#xD;&#xA;        let bountyCellIdentifier = ""BountyCellNew""&#xD;&#xA;        let personCellIdentifier = ""PersonCell""&#xD;&#xA;        let completedCellIdentifier = ""TrendingCompletedImageCell""&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        @IBAction func toggleTrending(sender:UISegmentedControl){&#xD;&#xA;            switch sender.selectedSegmentIndex{&#xD;&#xA;            case 0:&#xD;&#xA;                //loads the bounties on segmented control tab&#xD;&#xA;                trendingToggle=0&#xD;&#xA;                nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in //@TODO: change pos&#xD;&#xA;                    self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 1:&#xD;&#xA;                trendingToggle=1&#xD;&#xA;                nwt.getTrendingCompletions(appUserId, position: 0){(compArr, err) in&#xD;&#xA;                    self.compArr = compArr as [Completion]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 2:&#xD;&#xA;                trendingToggle=2&#xD;&#xA;                nwt.getTrendingPeople(appUserId, position: 0){(peopleArr, err) in&#xD;&#xA;                    self.peopleArr = peopleArr as [Person]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            default:&#xD;&#xA;                break&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            //reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewDidLoad() {&#xD;&#xA;        super.viewDidLoad()&#xD;&#xA;        &#xD;&#xA;        trendingTableView.estimatedRowHeight = 300.0&#xD;&#xA;        trendingTableView.rowHeight = UITableViewAutomaticDimension&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        /******* Kyle Inserted *******/&#xD;&#xA;        //for followers and following back button text, you set it here for when you segue into that section&#xD;&#xA;        let backItem = UIBarButtonItem(title: "" "", style: UIBarButtonItemStyle.Plain, target: nil, action: nil)&#xD;&#xA;        navigationItem.backBarButtonItem = backItem&#xD;&#xA;        /******* END Kyle Inserted *******/&#xD;&#xA;        &#xD;&#xA;        trendingTableView.allowsSelection = false;&#xD;&#xA;        trendingTableView.delegate = self&#xD;&#xA;        trendingTableView.dataSource = self&#xD;&#xA;        &#xD;&#xA;        //sidebar code&#xD;&#xA;        if self.revealViewController() != nil {&#xD;&#xA;            menubtn.target = self.revealViewController()&#xD;&#xA;            menubtn.action = ""revealToggle:""&#xD;&#xA;            self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        //loads the bounty on segue&#xD;&#xA;        nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in&#xD;&#xA;            self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;            self.reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        override func didReceiveMemoryWarning() {&#xD;&#xA;            super.didReceiveMemoryWarning()&#xD;&#xA;            // Dispose of any resources that can be recreated.&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewWillAppear(animated: Bool) {&#xD;&#xA;            super.viewWillAppear(animated)&#xD;&#xA;            //deselectAllRows()&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func deselectAllRows() {&#xD;&#xA;            if let selectedRows = trendingTableView.indexPathsForSelectedRows() as? [NSIndexPath] {&#xD;&#xA;                for indexPath in selectedRows {&#xD;&#xA;                    trendingTableView.deselectRowAtIndexPath(indexPath, animated: false)&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func reloadTableViewContent() {&#xD;&#xA;            dispatch_async(dispatch_get_main_queue(), { () -> Void in&#xD;&#xA;                self.trendingTableView.reloadData()&#xD;&#xA;                println(""reloading table view content"")&#xD;&#xA;                self.trendingTableView.scrollRectToVisible(CGRectMake(0, 0, 1, 1), animated: false)&#xD;&#xA;            })&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func numberOfSectionsInTableView(tableView: UITableView) -> Int {&#xD;&#xA;            return 1&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, numberOfRowsInSection section: Int) -> Int {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;            return bountyArr.count&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return compArr.count&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                return peopleArr.count&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;                return bountyCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return completedCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else{&#xD;&#xA;            return personCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        //calls method to set and display each trending bounty cell&#xD;&#xA;        func bountyCellAtIndexPath(indexPath:NSIndexPath) -> BountyCellNew {&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(bountyCellIdentifier) as! BountyCellNew&#xD;&#xA;            var bounty = bountyArr[indexPath.row]&#xD;&#xA;            cell.setBountyCellTrending(bounty)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func completedCellAtIndexPath(indexPath:NSIndexPath) -> CompletedCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(completedCellIdentifier) as! CompletedCell&#xD;&#xA;            var comp = compArr[indexPath.row]&#xD;&#xA;            cell.setTrendingCompletedCell(comp)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func personCellAtIndexPath(indexPath:NSIndexPath) -> PersonCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(personCellIdentifier) as! PersonCell&#xD;&#xA;            var peop = peopleArr[indexPath.row]&#xD;&#xA;            cell.setTrendingPeopleCell(peop)&#xD;&#xA;            return cell&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/2ArcS.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/sXnjr.png";;added 1 character in body
100115699;32622837;4964612;5;6f9f589a-5953-4e00-a4c5-a156aa569c94;2015-09-21 13:48:18.0;"I am having some serious trouble getting my multiline label to show all of its lines. Often, the last line of the label simply does not appear, but it is apparent that the dynamically calculated cell height has taken in to account that it should have appeared, leaving around the appropriate amount of white space left over in my cell. &#xD;&#xA;&#xD;&#xA;The affected label can display 1-7 lines depending on the data. I have played around with many various constraints to try and get it to display but regardless of what is on the last line, it just won't display. &#xD;&#xA;&#xD;&#xA;The weird thing is, sometimes it will display when I segue in to the VC, but then when I use the segmented controller inside the VC to display different data and then go back again, the last line will again not display. The opposite happens frequently too (last line of label cutting off when I segue in to the VC, but then using the segmented controller inside the VC to change the displayed data and then go back, it will then display fine).&#xD;&#xA;&#xD;&#xA;Things I have ensured: The label is set to word wrap, has line count of 0, has a height greater than or equal to the height of one of it's lines, its resistance and vertical content hugging is set to the highest of anything in the cell, and the width is set appropriately. &#xD;&#xA;&#xD;&#xA;The below code is how I determine how many lines the label will have:&#xD;&#xA;&#xD;&#xA;    let descString = NSMutableAttributedString()&#xD;&#xA;            &#xD;&#xA;    let bountyStart = NSMutableAttributedString(string: ""Bounty: "", attributes: [NSFontAttributeName : UIFont.boldSystemFontOfSize(15)])&#xD;&#xA;    let bountyDesc = NSMutableAttributedString(string: bounty.description)&#xD;&#xA;    descString.appendAttributedString(bountyStart)&#xD;&#xA;    descString.appendAttributedString(bountyDesc)&#xD;&#xA;&#xD;&#xA;    let bLine = NSMutableAttributedString(string: ""\\n\\n"", attributes: [NSFontAttributeName : UIFont.systemFontOfSize(2)])&#xD;&#xA;    descString.appendAttributedString(bLine)&#xD;&#xA;            &#xD;&#xA;    if !(bounty.turtles == 0.0){&#xD;&#xA;        let turtleStart = NSMutableAttributedString(string: ""Your turtle count: "")&#xD;&#xA;        let turtleAmount = NSMutableAttributedString(string: bounty.turtleCount.description)&#xD;&#xA;        descString.appendAttributedString(turtleStart)&#xD;&#xA;        descString.appendAttributedString(turtleAmount)&#xD;&#xA;    }&#xD;&#xA;    descriptionLabel.attributedText = descString&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;In the screen shot below, you can see that the height of the cell is being calculated appropriately but for some reason, the last line of the label just refuses to show. It should appear after the ""is for noobs"" line. I've manipulated the white space to appear after the line instead of elsewhere by setting the problem labels bottom to constraint to be greater than or equal, and all other top to bottom constraints as equal to.&#xD;&#xA;&#xD;&#xA;[![enter image description here][1]][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Constraints of the problem label:&#xD;&#xA;&#xD;&#xA;[![enter image description here][2]][2]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I've been stumped for quite a while on this one, and I'm starting to think it's not the constraints I've set but something much deeper. All though I would love to be proven wrong.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Here is my VC code.&#xD;&#xA;&#xD;&#xA;        import UIKit&#xD;&#xA;    &#xD;&#xA;    class TrendingVC: UIViewController, UITableViewDataSource, UITableViewDelegate{&#xD;&#xA;        &#xD;&#xA;        @IBOutlet weak var menubtn:UIBarButtonItem!&#xD;&#xA;        @IBOutlet var trendingTableView:UITableView!  &#xD;&#xA;        &#xD;&#xA;        var trendingToggle:Int = 0&#xD;&#xA;        let nwt = NWTrending()&#xD;&#xA;        let appUserId = NSUserDefaults.standardUserDefaults().stringForKey(""UserId"") ?? ""1"" //@TODO: remove ?? 1&#xD;&#xA;        var bountyArr: [Bounty] = []&#xD;&#xA;        var compArr: [Completion] = []&#xD;&#xA;        var peopleArr: [Person] = []&#xD;&#xA;        &#xD;&#xA;        var userId: String = ""0""&#xD;&#xA;        var username: String = """"&#xD;&#xA;        &#xD;&#xA;        let bountyCellIdentifier = ""BountyCellNew""&#xD;&#xA;        let personCellIdentifier = ""PersonCell""&#xD;&#xA;        let completedCellIdentifier = ""TrendingCompletedImageCell""&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        @IBAction func toggleTrending(sender:UISegmentedControl){&#xD;&#xA;            switch sender.selectedSegmentIndex{&#xD;&#xA;            case 0:&#xD;&#xA;                //loads the bounties on segmented control tab&#xD;&#xA;                trendingToggle=0&#xD;&#xA;                nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in //@TODO: change pos&#xD;&#xA;                    self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 1:&#xD;&#xA;                trendingToggle=1&#xD;&#xA;                nwt.getTrendingCompletions(appUserId, position: 0){(compArr, err) in&#xD;&#xA;                    self.compArr = compArr as [Completion]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            case 2:&#xD;&#xA;                trendingToggle=2&#xD;&#xA;                nwt.getTrendingPeople(appUserId, position: 0){(peopleArr, err) in&#xD;&#xA;                    self.peopleArr = peopleArr as [Person]&#xD;&#xA;                    self.reloadTableViewContent()&#xD;&#xA;                }&#xD;&#xA;            default:&#xD;&#xA;                break&#xD;&#xA;            }&#xD;&#xA;            &#xD;&#xA;            //reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewDidLoad() {&#xD;&#xA;        super.viewDidLoad()&#xD;&#xA;        &#xD;&#xA;        trendingTableView.estimatedRowHeight = 300.0&#xD;&#xA;        trendingTableView.rowHeight = UITableViewAutomaticDimension&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        /******* Kyle Inserted *******/&#xD;&#xA;        //for followers and following back button text, you set it here for when you segue into that section&#xD;&#xA;        let backItem = UIBarButtonItem(title: "" "", style: UIBarButtonItemStyle.Plain, target: nil, action: nil)&#xD;&#xA;        navigationItem.backBarButtonItem = backItem&#xD;&#xA;        /******* END Kyle Inserted *******/&#xD;&#xA;        &#xD;&#xA;        trendingTableView.allowsSelection = false;&#xD;&#xA;        trendingTableView.delegate = self&#xD;&#xA;        trendingTableView.dataSource = self&#xD;&#xA;        &#xD;&#xA;        //sidebar code&#xD;&#xA;        if self.revealViewController() != nil {&#xD;&#xA;            menubtn.target = self.revealViewController()&#xD;&#xA;            menubtn.action = ""revealToggle:""&#xD;&#xA;            self.view.addGestureRecognizer(self.revealViewController().panGestureRecognizer())&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        //loads the bounty on segue&#xD;&#xA;        nwt.getTrendingBounties(appUserId, position: 0){(bountyArr, err) in&#xD;&#xA;            self.bountyArr = bountyArr as [Bounty]&#xD;&#xA;            self.reloadTableViewContent()&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;        override func didReceiveMemoryWarning() {&#xD;&#xA;            super.didReceiveMemoryWarning()&#xD;&#xA;            // Dispose of any resources that can be recreated.&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        override func viewWillAppear(animated: Bool) {&#xD;&#xA;            super.viewWillAppear(animated)&#xD;&#xA;            //deselectAllRows()&#xD;&#xA;    &#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func deselectAllRows() {&#xD;&#xA;            if let selectedRows = trendingTableView.indexPathsForSelectedRows() as? [NSIndexPath] {&#xD;&#xA;                for indexPath in selectedRows {&#xD;&#xA;                    trendingTableView.deselectRowAtIndexPath(indexPath, animated: false)&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func reloadTableViewContent() {&#xD;&#xA;            dispatch_async(dispatch_get_main_queue(), { () -> Void in&#xD;&#xA;                self.trendingTableView.reloadData()&#xD;&#xA;                println(""reloading table view content"")&#xD;&#xA;                self.trendingTableView.scrollRectToVisible(CGRectMake(0, 0, 1, 1), animated: false)&#xD;&#xA;            })&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func numberOfSectionsInTableView(tableView: UITableView) -> Int {&#xD;&#xA;            return 1&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, numberOfRowsInSection section: Int) -> Int {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;            return bountyArr.count&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return compArr.count&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                return peopleArr.count&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func tableView(trendingTableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {&#xD;&#xA;            if trendingToggle == 0{&#xD;&#xA;                return bountyCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else if trendingToggle == 1{&#xD;&#xA;                return completedCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;            else{&#xD;&#xA;            return personCellAtIndexPath(indexPath)&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        //calls method to set and display each trending bounty cell&#xD;&#xA;        func bountyCellAtIndexPath(indexPath:NSIndexPath) -> BountyCellNew {&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(bountyCellIdentifier) as! BountyCellNew&#xD;&#xA;            var bounty = bountyArr[indexPath.row]&#xD;&#xA;            cell.setBountyCellTrending(bounty)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        func completedCellAtIndexPath(indexPath:NSIndexPath) -> CompletedCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(completedCellIdentifier) as! CompletedCell&#xD;&#xA;            var comp = compArr[indexPath.row]&#xD;&#xA;            cell.setTrendingCompletedCell(comp)&#xD;&#xA;            return cell&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        func personCellAtIndexPath(indexPath:NSIndexPath) -> PersonCell{&#xD;&#xA;            let cell = trendingTableView.dequeueReusableCellWithIdentifier(personCellIdentifier) as! PersonCell&#xD;&#xA;            var peop = peopleArr[indexPath.row]&#xD;&#xA;            cell.setTrendingPeopleCell(peop)&#xD;&#xA;            return cell&#xD;&#xA;        }   &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://i.stack.imgur.com/2ArcS.png&#xD;&#xA;  [2]: http://i.stack.imgur.com/enlKw.png&#xD;&#xA;  [3]: http://i.stack.imgur.com/sXnjr.png";;deleted 156 characters in body
