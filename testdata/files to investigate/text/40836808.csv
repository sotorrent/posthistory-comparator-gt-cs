Id;PostId;UserId;PostHistoryTypeId;RevisionGUID;CreationDate;Text;UserDisplayName;Comment
132548982;40836808;3968346;2;7bde8c7a-b0c5-485d-bffa-dfe53c48968a;2016-11-28 03:35:49.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(fromNode, dic):&#xD;&#xA;    graphes = []&#xD;&#xA;    while dic:&#xD;&#xA;        graph = []&#xD;&#xA;        graphes.append(graph)&#xD;&#xA;        findHelper(fromNode, graph, dic)&#xD;&#xA;    return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic):&#xD;&#xA;    ID = """"&#xD;&#xA;    for i in dic:&#xD;&#xA;        if dic[i][0] == fromNode:&#xD;&#xA;            ID = i&#xD;&#xA;            toNode = dic[i][1]&#xD;&#xA;            dic.pop(i)&#xD;&#xA;    if ID:&#xD;&#xA;        graph.append(ID)&#xD;&#xA;        findHelper(toNode, graph, dic)&#xD;&#xA;&#xD;&#xA;This code might work.";;
132549231;40836808;3968346;5;893d7de4-f550-45b2-b5d2-0d50a4624a3a;2016-11-28 03:46:02.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(fromNode, dic):&#xD;&#xA;    graphes = []&#xD;&#xA;    while dic:&#xD;&#xA;        graph = []&#xD;&#xA;        graphes.append(graph)&#xD;&#xA;        findHelper(fromNode, graph, dic)&#xD;&#xA;    return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic):&#xD;&#xA;    ID = """"&#xD;&#xA;    for i in dic:&#xD;&#xA;        if dic[i][0] == fromNode:&#xD;&#xA;            ID = i&#xD;&#xA;            toNode = dic[i][1]&#xD;&#xA;            dic.pop(i)&#xD;&#xA;    if ID:&#xD;&#xA;        graph.append(ID)&#xD;&#xA;        findHelper(toNode, graph, dic)&#xD;&#xA;&#xD;&#xA;This code might work.&#xD;&#xA;&#xD;&#xA;You want to call it by";;added 26 characters in body
132549760;40836808;3968346;5;9755831f-e6ac-4210-9763-2a341e078706;2016-11-28 04:03:20.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(dic):&#xD;&#xA;        graphes = []&#xD;&#xA;        IDs = list(dic)&#xD;&#xA;        while IDs:&#xD;&#xA;            fromNode = IDs.pop()&#xD;&#xA;            graph = []&#xD;&#xA;            graphes.append(graph)&#xD;&#xA;            findHelper(fromNode, graph, dic, IDs)&#xD;&#xA;        connect = []&#xD;&#xA;        for i in range(len(graphes)):&#xD;&#xA;            for j in range(len(graphes)):&#xD;&#xA;                if graph[i][-1] == graph[j][0]:&#xD;&#xA;                    connect.append((i, j))&#xD;&#xA;        if connect:&#xD;&#xA;           for pair in connect:&#xD;&#xA;                graph[pair[0]] = graph[pair[0]] + graph[pair[1]]&#xD;&#xA;                graph.pop(pair[1])&#xD;&#xA;&#xD;&#xA;        return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic, IDs):&#xD;&#xA;        ID = """"&#xD;&#xA;        for i in range(len(IDs)):&#xD;&#xA;            idf = IDs[i]&#xD;&#xA;            if dic[idf][0] == fromNode:&#xD;&#xA;                ID = idf&#xD;&#xA;                toNode = dic[idf][1]&#xD;&#xA;                IDs.pop(i)&#xD;&#xA;        if ID:&#xD;&#xA;            graph.append(ID)&#xD;&#xA;            findHelper(toNode, graph, dic, IDs)&#xD;&#xA;&#xD;&#xA;This code might work.";;added 392 characters in body
132550018;40836808;3968346;5;33e04e70-b3b3-479d-bdd3-17525eb34757;2016-11-28 04:10:58.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(dic):&#xD;&#xA;        graphes = []&#xD;&#xA;        IDs = list(dic)&#xD;&#xA;        while IDs:&#xD;&#xA;            fromNode = IDs.pop()&#xD;&#xA;            graph = []&#xD;&#xA;            graphes.append(graph)&#xD;&#xA;            findHelper(fromNode, graph, dic, IDs)&#xD;&#xA;&#xD;&#xA;        # merge the split graphes&#xD;&#xA;        connect = []&#xD;&#xA;        for i in range(len(graphes)):&#xD;&#xA;            for j in range(len(graphes)):&#xD;&#xA;                if graph[i][-1] == graph[j][0]:&#xD;&#xA;                    connect.append((i, j))&#xD;&#xA;        if connect:&#xD;&#xA;           for pair in connect:&#xD;&#xA;                graph[pair[0]] = graph[pair[0]] + graph[pair[1]]&#xD;&#xA;                graph.pop(pair[1])&#xD;&#xA;&#xD;&#xA;        return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic, IDs):&#xD;&#xA;        ID = """"&#xD;&#xA;        for i in range(len(IDs)):&#xD;&#xA;            idf = IDs[i]&#xD;&#xA;            if dic[idf][0] == fromNode:&#xD;&#xA;                ID = idf&#xD;&#xA;                toNode = dic[idf][1]&#xD;&#xA;                IDs.pop(i)&#xD;&#xA;        if ID:&#xD;&#xA;            graph.append(ID)&#xD;&#xA;            findHelper(toNode, graph, dic, IDs)&#xD;&#xA;&#xD;&#xA;This code might work.";;added 37 characters in body
132550822;40836808;3968346;5;7220356a-278e-465e-9f96-a763d43d6def;2016-11-28 04:36:07.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(dic):&#xD;&#xA;        graphes = []&#xD;&#xA;        IDs = list(dic)&#xD;&#xA;        while IDs:&#xD;&#xA;            fromNode = dic[IDs[-1]][0]&#xD;&#xA;            graph = []&#xD;&#xA;            graphes.append(graph)&#xD;&#xA;            findHelper(fromNode, graph, dic, IDs)&#xD;&#xA;        connect = []&#xD;&#xA;        for i in range(len(graphes)):&#xD;&#xA;            for j in range(len(graphes)):&#xD;&#xA;                if dic[graphes[i][-1]][-1] == dic[graphes[j][0]][0]:&#xD;&#xA;                    connect.append((i, j))&#xD;&#xA;        if connect:&#xD;&#xA;            for pair in connect:&#xD;&#xA;                graph[pair[0]] = graph[pair[0]] + graph[pair[1]]&#xD;&#xA;                graph.pop(pair[1])&#xD;&#xA;&#xD;&#xA;        return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic, IDs):&#xD;&#xA;        ID = """"&#xD;&#xA;        for i in range(len(IDs)):&#xD;&#xA;            idf = IDs[i]&#xD;&#xA;            if dic[idf][0] == fromNode:&#xD;&#xA;                ID = idf&#xD;&#xA;                toNode = dic[idf][1]&#xD;&#xA;                IDs.pop(i)&#xD;&#xA;        if ID:&#xD;&#xA;            graph.append(ID)&#xD;&#xA;            findHelper(toNode, graph, dic, IDs)&#xD;&#xA;&#xD;&#xA;This code might work.";;deleted 9 characters in body
132551106;40836808;3968346;5;10d86e2d-b69b-44a1-84e3-cba9d9ef8f32;2016-11-28 04:44:06.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(dic):&#xD;&#xA;        graphes = []&#xD;&#xA;        IDs = list(dic)&#xD;&#xA;        while IDs:&#xD;&#xA;            fromNode = dic[IDs[-1]][0]&#xD;&#xA;            graph = []&#xD;&#xA;            graphes.append(graph)&#xD;&#xA;            findHelper(fromNode, graph, dic, IDs)&#xD;&#xA;        connect = []&#xD;&#xA;        for i in range(len(graphes)):&#xD;&#xA;            for j in range(len(graphes)):&#xD;&#xA;                if dic[graphes[i][-1]][-1] == dic[graphes[j][0]][0]:&#xD;&#xA;                    connect.append((i, j))&#xD;&#xA;        if connect:&#xD;&#xA;            for pair in connect:&#xD;&#xA;                graphes[pair[0]] = graphes[pair[0]] + graphes[pair[1]]&#xD;&#xA;                graphes.pop(pair[1])&#xD;&#xA;&#xD;&#xA;        return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic, IDs):&#xD;&#xA;        ID = """"&#xD;&#xA;        for i in range(len(IDs)):&#xD;&#xA;            idf = IDs[i]&#xD;&#xA;            if dic[idf][0] == fromNode:&#xD;&#xA;                ID = idf&#xD;&#xA;                toNode = dic[idf][1]&#xD;&#xA;                IDs.pop(i)&#xD;&#xA;                break&#xD;&#xA;        if ID:&#xD;&#xA;            graph.append(ID)&#xD;&#xA;            findHelper(toNode, graph, dic, IDs)&#xD;&#xA;&#xD;&#xA;This code might work.";;added 8 characters in body
132551356;40836808;3968346;5;4240d01d-3e08-4d71-a257-3c5923523e30;2016-11-28 04:52:07.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(dic):&#xD;&#xA;        graphes = []&#xD;&#xA;        IDs = list(dic)&#xD;&#xA;        while IDs:&#xD;&#xA;            fromNode = dic[IDs[-1]][0]&#xD;&#xA;            graph = []&#xD;&#xA;            graphes.append(graph)&#xD;&#xA;            findHelper(fromNode, graph, dic, IDs)&#xD;&#xA;        connect = []&#xD;&#xA;        for i in range(len(graphes)):&#xD;&#xA;            for j in range(len(graphes)):&#xD;&#xA;                if dic[graphes[i][-1]][-1] == dic[graphes[j][0]][0]:&#xD;&#xA;                    connect.append((i, j))&#xD;&#xA;        if connect:&#xD;&#xA;            for pair in connect:&#xD;&#xA;                graphes[pair[0]] = graphes[pair[0]] + graphes[pair[1]]&#xD;&#xA;                graphes.pop(pair[1])&#xD;&#xA;&#xD;&#xA;        return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic, IDs):&#xD;&#xA;        ID = """"&#xD;&#xA;        for i in range(len(IDs)):&#xD;&#xA;            idf = IDs[i]&#xD;&#xA;            if dic[idf][0] == fromNode:&#xD;&#xA;                ID = idf&#xD;&#xA;                toNode = dic[idf][1]&#xD;&#xA;                IDs.pop(i)&#xD;&#xA;                break&#xD;&#xA;        if ID:&#xD;&#xA;            graph.append(ID)&#xD;&#xA;            findHelper(toNode, graph, dic, IDs)&#xD;&#xA;&#xD;&#xA;This code might work.&#xD;&#xA;&#xD;&#xA;The above codes, while not all ids are enlisted, get a id from the dic and check wether it can find its way to another node: if so, they form a list and search for the next node; else itself forms a list. Then, it checks wether the already formed lists are split. For instance, for {""a"": (1,2), ""b"": (2,3)}, in this stage, the code will produce [[""a""], [""b""]]. The code detect the situation and merges them to [[""a"", ""b""]]. Finally the codes convert the lists to tuples and return.";;added 8 characters in body
132551612;40836808;3968346;5;090e0242-7978-434e-88cb-66224d56dfcd;2016-11-28 05:00:19.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(dic):&#xD;&#xA;        graphes = []&#xD;&#xA;        IDs = list(dic)&#xD;&#xA;        while IDs:&#xD;&#xA;            fromNode = dic[IDs[-1]][0]&#xD;&#xA;            graph = []&#xD;&#xA;            graphes.append(graph)&#xD;&#xA;            findHelper(fromNode, graph, dic, IDs)&#xD;&#xA;        # merge the broken lists&#xD;&#xA;        connect = []&#xD;&#xA;        for i in range(len(graphes)):&#xD;&#xA;            for j in range(len(graphes)):&#xD;&#xA;                if dic[graphes[i][-1]][-1] == dic[graphes[j][0]][0]:&#xD;&#xA;                    connect.append((i, j))&#xD;&#xA;        if connect:&#xD;&#xA;            for pair in connect:&#xD;&#xA;                graphes[pair[0]] = graphes[pair[0]] + graphes[pair[1]]&#xD;&#xA;            for k in connect:&#xD;&#xA;                if k[0] > pair[1]:&#xD;&#xA;                    k[0] -= 1&#xD;&#xA;                if k[1] > pair[1]:&#xD;&#xA;                    k[1] -= 1&#xD;&#xA;                graphes.pop(pair[1])&#xD;&#xA;&#xD;&#xA;        return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic, IDs):&#xD;&#xA;        ID = """"&#xD;&#xA;        for i in range(len(IDs)):&#xD;&#xA;            idf = IDs[i]&#xD;&#xA;            if dic[idf][0] == fromNode:&#xD;&#xA;                ID = idf&#xD;&#xA;                toNode = dic[idf][1]&#xD;&#xA;                IDs.pop(i)&#xD;&#xA;                break&#xD;&#xA;        if ID:&#xD;&#xA;            graph.append(ID)&#xD;&#xA;            findHelper(toNode, graph, dic, IDs)&#xD;&#xA;&#xD;&#xA;The above codes might work.&#xD;&#xA;&#xD;&#xA;The above codes, while not all ids are enlisted, get an id from the dic and check wether it can find its way to another node: if so, they form a list and search for the next node; else itself forms a list. Then, it checks wether the already formed lists are split. For instance, for {""a"": (1,2), ""b"": (2,3)}, in this stage, the code will produce [[""a""], [""b""]]. The codes detect the situation and merge them to [[""a"", ""b""]]. Finally the codes convert the lists to tuples and return.";;added 165 characters in body
132551775;40836808;3968346;5;22c3a636-062d-4729-8ac2-69101a06ac10;2016-11-28 05:05:21.0;"If I understand you correctly, you want to get all the disconnected graphs from a dictionary representation. &#xD;&#xA;&#xD;&#xA;    def find(dic):&#xD;&#xA;        graphes = []&#xD;&#xA;        IDs = list(dic)&#xD;&#xA;        while IDs:&#xD;&#xA;            fromNode = dic[IDs[-1]][0]&#xD;&#xA;            graph = []&#xD;&#xA;            graphes.append(graph)&#xD;&#xA;            findHelper(fromNode, graph, dic, IDs)&#xD;&#xA;        # merge the broken lists&#xD;&#xA;        connect = []&#xD;&#xA;        for i in range(len(graphes)):&#xD;&#xA;            for j in range(len(graphes)):&#xD;&#xA;                if dic[graphes[i][-1]][-1] == dic[graphes[j][0]][0]:&#xD;&#xA;                    connect.append((i, j))&#xD;&#xA;        if connect:&#xD;&#xA;            for pair in connect:&#xD;&#xA;                graphes[pair[0]] = graphes[pair[0]] + graphes[pair[1]]&#xD;&#xA;            for k in connect:&#xD;&#xA;                if k[0] > pair[1]:&#xD;&#xA;                    k[0] -= 1&#xD;&#xA;                if k[1] > pair[1]:&#xD;&#xA;                    k[1] -= 1&#xD;&#xA;                graphes.pop(pair[1])&#xD;&#xA;&#xD;&#xA;        return tuple((tuple(i) for i in graphes))&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def findHelper(fromNode, graph, dic, IDs):&#xD;&#xA;        ID = """"&#xD;&#xA;        for i in range(len(IDs)):&#xD;&#xA;            idf = IDs[i]&#xD;&#xA;            if dic[idf][0] == fromNode:&#xD;&#xA;                ID = idf&#xD;&#xA;                toNode = dic[idf][1]&#xD;&#xA;                IDs.pop(i)&#xD;&#xA;                break&#xD;&#xA;        if ID:&#xD;&#xA;            graph.append(ID)&#xD;&#xA;            findHelper(toNode, graph, dic, IDs)&#xD;&#xA;&#xD;&#xA;The above codes might work.&#xD;&#xA;&#xD;&#xA;The above codes, while not all ids are enlisted, get an id from the dic and check wether it can find its way to another node: if so, they form a list and search for the next node; else itself forms a list. Then, it checks wether the already formed lists are split. For instance, for {""a"": (1,2), ""b"": (2,3)}, in this stage, the code will produce [[""a""], [""b""]]. The codes detect the situation and merge them to [[""a"", ""b""]]. Finally the codes convert the lists to tuples and return.&#xD;&#xA;&#xD;&#xA;P.S. The codes may contain bugs. Please point them out if you find them.";;added 165 characters in body
